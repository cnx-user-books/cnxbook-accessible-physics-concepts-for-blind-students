<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Phy1002: If You Can Imagine It, You Can Draw It using SVG</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m39607</md:content-id>
  <md:title>Phy1002: If You Can Imagine It, You Can Draw It using SVG</md:title>
  <md:abstract>The study of physics is replete with requirements to create and analyze technical drawings. This is obviously more difficult for blind students than for sighted students. However, blind students can draw technical diagrams and the purpose of this module is to show you how. If you can imagine it, you can draw it using SVG.</md:abstract>
  <md:uuid>0803a1bf-9c6d-435a-a5f1-e21b1dbd978c</md:uuid>
</metadata>

<content>

















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="General">

General

</link>


</item>


		

<item id="li1002">
<link id="a1002" target-id="Prerequisites">

Prerequisites

</link>


</item>


		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


		

<item id="li1006">
<link id="a1006" target-id="Supplemental_material">

Supplemental material

</link>


</item>


	

</list>


	

</item>


	

<item id="li1007">
<link id="a1007" target-id="Discussion">

Discussion

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1008">
<link id="a1008" target-id="Creation_of_tactile_graphics">

Creation of tactile graphics

</link>


</item>


		

<item id="li1009">
<link id="a1009" target-id="What_is_SVG">

What is SVG 

<emphasis id="em1000" effect="italics">
(Scalable Vector Graphics)

</emphasis>
?

</link>


</item>


		

<item id="li1010">
<link id="a1010" target-id="What_does_this_mean_to_you">

What does this mean to you?

</link>


</item>


		

<item id="li1011">
<link id="a1011" target-id="The_first_example_drawing">

Sample drawing

</link>


</item>


		

<item id="li1012">
<link id="a1012" target-id="Two_approaches">

Two approaches

</link>


<list id="ul1004" list-type="bulleted">

			

<item id="li1013">
<link id="a1013" target-id="Writing_raw_SVG_code">

Writing raw SVG code

</link>


</item>


			

<item id="li1014">
<link id="a1014" target-id="Using_drawing_tools">

Using drawing tools

</link>


</item>


		

</list>


		

</item>


		

<item id="li1015">
<link id="a1015" target-id="Sample_program">

Sample program

</link>


<list id="ul1005" list-type="bulleted">

			

<item id="li1016">
<link id="a1016" target-id="Beginning_of_the_program_named_Svg21a">

Beginning of the program named Svg21a.java

</link>


</item>


			

<item id="li1017">
<link id="a1017" target-id="Create_a_drawing_canvas">

Create a drawing canvas

</link>


</item>


			

<item id="li1018">
<link id="a1018" target-id="Draw_a_rectangular_border_on_the_canvas">

Draw a rectangular border on the canvas

</link>


</item>


			

<item id="li1019">
<link id="a1019" target-id="Draw_the_floor_and_the_wall">

Draw the floor and the wall

</link>


</item>


			

<item id="li1020">
<link id="a1020" target-id="Drawing_more_rectangles">

Draw more rectangles

</link>


</item>


			

<item id="li1021">
<link id="a1021" target-id="Draw_a_polygon">

Draw a polygon

</link>


</item>


			

<item id="li1022">
<link id="a1022" target-id="Draw_the_pulley_support">

Draw the rectangular pulley support

</link>


</item>


			

<item id="li1023">
<link id="a1023" target-id="Draw_a_circle">

Draw a circle

</link>


</item>


			

<item id="li1024">
<link id="a1024" target-id="Draw_more_lines">

Draw more lines

</link>


</item>


			

<item id="li1025">
<link id="a1025" target-id="Change_line_thicknesses">

Change line thicknesses

</link>


</item>


			

<item id="li1026">
<link id="a1026" target-id="Drawing_text">

Draw text

</link>


</item>


			

<item id="li1027">
<link id="a1027" target-id="Write_the_output_file">

Write the output file

</link>


</item>


			

<item id="li1028">
<link id="a1028" target-id="The_remaining_Java_code">

The remaining Java code

</link>


</item>


		

</list>


		

</item>


		

<item id="li1029">
<link id="a1029" target-id="The_SVG_graphics_library">

The SVG graphics library

</link>


</item>


		

<item id="li1030">
<link id="a1030" target-id="Another_sample_program">

Another sample program

</link>


</item>


	

</list>


	

</item>


	

<item id="li1031">
<link id="a1031" target-id="Creating_compiling_and_running_Java_programs">

Writing, compiling, and running Java programs

</link>


<list id="ul1006" list-type="bulleted">

		

<item id="li1032">
<link id="a1032" target-id="Writing_the_code">

Writing Java code

</link>


</item>


		

<item id="li1033">
<link id="a1033" target-id="Preparing_to_compile_and_run_Java_code">

Preparing to compile and run Java code

</link>


<list id="ul1007" list-type="bulleted">

			

<item id="li1034">
<link id="a1034" target-id="The_java_development_kit">

The java development kit 
			

<emphasis id="em1001" effect="italics">
(JDK)

</emphasis>
</link>


</item>


			

<item id="li1035">
<link id="a1035" target-id="JDOM_version">

JDOM version 1.1.1

</link>


</item>


		

</list>


		

</item>


		

<item id="li1036">
<link id="a1036" target-id="Compiling_and_running_Java_code">

Compiling and running 
		Java code

</link>


</item>


	

</list>


	

</item>


	

<item id="li1037">
<link id="a1037" target-id="Resources">

Resources

</link>


</item>


	

<item id="li1038">
<link id="a1038" target-id="Complete_program_listings">

Complete program listings

</link>


</item>


	

<item id="li1039">
<link id="a1039" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>






</section>
<section id="h11001">
<title>
 

<emphasis id="Preface" effect="bold">


</emphasis>

Preface

</title>






<section id="h21000">
<title>
 

<emphasis id="General" effect="bold">

General

</emphasis>


</title>









<para id="p1000">
This module is part of a collection of modules designed to make physics 
concepts accessible to blind students.

</para>




<para id="p1001">
If you opened this page in the context of the book, a Table of Contents for 
the book (or collection) should be available above and to the left of this 
paragraph. Otherwise, click


<link id="a1040" url="http://cnx.org/contents/a7842db2-93c6-4c06-a5e3-56c282358143">

here

</link>

 
to open the book at the beginning.

</para>




<para id="p1002">
This book is intended to supplement but not to replace the textbook in an 
introductory high school or college physics course. 

</para>




<para id="p1003">
The study of physics is replete with requirements to create and analyze 
technical drawings. This is obviously more difficult for blind students than for 
sighted students. However, blind students can draw technical diagrams and the 
purpose of this module is to show you how. If you can imagine it, you can draw 
it using SVG.

</para>




</section>
<section id="h21001">
<title>
<emphasis id="Prerequisites" effect="bold">

Prerequisites

</emphasis>


</title>




<para id="p1004">
In addition to an Internet connection and a browser, you will need the 
following tools 

<emphasis id="em1002" effect="italics">
(as a minimum)

</emphasis>
 to work through the exercises in these modules:

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1040">
A graph board for plotting graphs and vector diagrams (

<link id="a1041" url="http://www.youtube.com/watch?v=c8plj9UsJbg">

http://www.youtube.com/watch?v=c8plj9UsJbg

</link>

).

</item>


	

<item id="li1041">
A protractor for measuring angles (

<link id="a1042" url="http://www.youtube.com/watch?v=v-F06HgiUpw">

http://www.youtube.com/watch?v=v-F06HgiUpw

</link>

).

</item>


	

<item id="li1042">
An audio screen reader that is compatible with your operating system, 
	such as the NonVisual Desktop Access program (NVDA), which is freely 
	available at 

<link id="a1043" url="http://www.nvda-project.org/">


	http://www.nvda-project.org/

</link>

.

</item>


	

<item id="li1043">
A refreshable Braille display capable of providing a line by line tactile output of information displayed on the computer monitor 
	(

<link id="a1044" url="http://www.userite.com/ecampus/lesson1/tools.php">

http://www.userite.com/ecampus/lesson1/tools.php

</link>

).

</item>


	

<item id="li1044">
A device to create Braille labels. Will be used to label graphs 
	constructed on the graph board.

</item>


	

<item id="li1045">
The ability to create tactile graphics as described
	

<link id="a1045" url="http://cnx.org/contents/9fe07552-485f-43e7-9753-87133cf60482">

here

</link>

.

</item>


	

</list>


	
	

<para id="p1005">
The minimum prerequisites for understanding the material in these modules 
	include:

</para>




<list id="ul1009" list-type="bulleted">

	

<item id="li1046">
A good understanding of algebra.

</item>


	

<item id="li1047">
An understanding of the use of a graph board for plotting graphs and 
	vector diagrams (

<link id="a1046" url="http://www.youtube.com/watch?v=c8plj9UsJbg">

http://www.youtube.com/watch?v=c8plj9UsJbg

</link>

).

</item>


	

<item id="li1048">
An understanding of the use of a protractor for measuring angles (

<link id="a1047" url="http://www.youtube.com/watch?v=v-F06HgiUpw">

http://www.youtube.com/watch?v=v-F06HgiUpw

</link>

).

</item>


	

<item id="li1049">
A basic understanding of the use of sine, cosine, and tangent from 
	trigonometry (

<link id="a1048" url="http://www.clarku.edu/~djoyce/trig/">

http://www.clarku.edu/~djoyce/trig/

</link>

).

</item>


	

<item id="li1050">
An introductory understanding of JavaScript programming (

<link id="a1049" url="http://www.dickbaldwin.com/tocjscript1.htm">

http://www.dickbaldwin.com/tocjscript1.htm

</link>

 and 

<link id="a1050" url="http://www.w3schools.com/js/default.asp">

http://www.w3schools.com/js/default.asp

</link>

).

</item>


	

<item id="li1051">
An understanding of all of the material covered in the earlier modules 
	in this collection.

</item>


	

<item id="li1052">
An understanding of the creation and use of tactile graphics as 
	described
	

<link id="a1051" url="http://cnx.org/contents/9fe07552-485f-43e7-9753-87133cf60482">

here

</link>

.

</item>




</list>


	


</section>
<section id="h21002">
<title>
 

<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>




<para id="p1006">
 I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.

</para>




<section id="h31000">
<title>
 

<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>




<list id="ul1010" list-type="bulleted">

	

<item id="li1053">
<link id="a1052" target-id="Figure_1">

Figure 1

</link>

. Mirror image from the file named Svg21a1r.svg. 

</item>


	

<item id="li1054">
<link id="a1053" target-id="Figure_2">

Figure 2

</link>

. Non-mirror-image version of the image from the file named Svg21a1r.svg.

</item>




</list>




</section>
<section id="h31001">
<title>
 

<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1011" list-type="bulleted">

	

<item id="li1055">
<link id="a1054" target-id="Listing_1">

Listing 1

</link>

. Raw SVG code for Figure 2.

</item>


	

<item id="li1056">
<link id="a1055" target-id="Listing_2">

Listing 2

</link>

. Beginning of the program named Svg21a.java. 

</item>


	

<item id="li1057">
<link id="a1056" target-id="Listing_3">

Listing 3

</link>

. Create a drawing canvas. 

</item>


	

<item id="li1058">
<link id="a1057" target-id="Listing_4">

Listing 4

</link>

. SVG code to create a canvas. 

</item>


	

<item id="li1059">
<link id="a1058" target-id="Listing_5">

Listing 5

</link>

. Draw a rectangular border on the canvas. 

</item>


	

<item id="li1060">
<link id="a1059" target-id="Listing_6">

Listing 6

</link>

. SVG code to draw a rectangle. 

</item>


	

<item id="li1061">
<link id="a1060" target-id="Listing_7">

Listing 7

</link>

. Draw the floor and the wall.

</item>


	

<item id="li1062">
<link id="a1061" target-id="Listing_8">

Listing 8

</link>

. SVG code to draw a line.

</item>


	

<item id="li1063">
<link id="a1062" target-id="Listing_9">

Listing 9

</link>

. Draw more rectangles.

</item>


	

<item id="li1064">
<link id="a1063" target-id="Listing_10">

Listing 10

</link>

. SVG code to draw more rectangles. 

</item>


	

<item id="li1065">
<link id="a1064" target-id="Listing_11">

Listing 11

</link>

. Draw a polygon.

</item>


	

<item id="li1066">
<link id="a1065" target-id="Listing_12">

Listing 12

</link>

. SVG code to draw a polygon.

</item>


	

<item id="li1067">
<link id="a1066" target-id="Listing_13">

Listing 13

</link>

. Draw the rectangular pulley support.

</item>


	

<item id="li1068">
<link id="a1067" target-id="Listing_14">

Listing 14

</link>

. Draw a circle.

</item>


	

<item id="li1069">
<link id="a1068" target-id="Listing_15">

Listing 15

</link>

. SVG code to draw a circle.

</item>


	

<item id="li1070">
<link id="a1069" target-id="Listing_16">

Listing 16

</link>

. Draw more lines. 

</item>


	

<item id="li1071">
<link id="a1070" target-id="Listing_17">

Listing 17

</link>

. SVG code to draw more lines.

</item>


	

<item id="li1072">
<link id="a1071" target-id="Listing_18">

Listing 18

</link>

. Set the stroke-width attribute value. 

</item>


	

<item id="li1073">
<link id="a1072" target-id="Listing_19">

Listing 19

</link>

. Modified stroke-width attribute value.

</item>


	

<item id="li1074">
<link id="a1073" target-id="Listing_20">

Listing 20

</link>

. Draw text.

</item>


	

<item id="li1075">
<link id="a1074" target-id="Listing_21">

Listing 21

</link>

. SVG code to draw text.

</item>


	

<item id="li1076">
<link id="a1075" target-id="Listing_22">

Listing 22

</link>

. Write the output file.

</item>


	

<item id="li1077">
<link id="a1076" target-id="Listing_23">

Listing 23

</link>

. The remaining Java code.

</item>


	

<item id="li1078">
<link id="a1077" target-id="Listing_24">

Listing 24

</link>

. Windows batch file.

</item>


	

<item id="li1079">
<link id="a1078" target-id="Listing_25">

Listing 25

</link>

. The program named Svg21a.java.

</item>


	

<item id="li1080">
<link id="a1079" target-id="Listing_26">

Listing 26

</link>

. The program named SvgLib21.java.

</item>


	

<item id="li1081">
<link id="a1080" target-id="Listing_27">

Listing 27

</link>

. The program named Svg21.java.

</item>




</list>




</section>
</section>
<section id="h21003">
<title>
 

<emphasis id="Supplemental_material" effect="bold">

Supplemental material

</emphasis>


</title>




<para id="p1007">
 I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials. You will find a consolidated index at


<link id="a1081" url="http://www.dickbaldwin.com/toc.htm">


www.DickBaldwin.com

</link>

.

</para>




</section>
</section>
<section id="h11002">
<title>
 

<emphasis id="Discussion" effect="bold">

Discussion

</emphasis>


</title>




<section id="h21004">
<title>
<emphasis id="Creation_of_tactile_graphics" effect="bold">

Creation of tactile graphics

</emphasis>


</title>




<para id="p1008">
The module titled 


<link id="a1082" url="http://cnx.org/contents/9fe07552-485f-43e7-9753-87133cf60482/Manual-Creation-of-Tactile-Gra">

Manual Creation of Tactile Graphics

</link>

 explains how to create tactile 
graphics from svg files that I will provide.

</para>




<para id="p1009">
If you are going to have an assistant create tactile graphics for this 
module, 

<emphasis id="you_will_need_to" effect="bold">

you will need to

</emphasis>

 

<link id="a1083" url="Phy1002.zip">

download the file named 
Phy1002.zip

</link>

, which contains the svg files for this module. Extract the svg 
files from the zip file and provide them to your assistant.

</para>




<para id="p1010">
In each case where I am providing an svg file for the creation of tactile 
graphics, I will identify the name of the appropriate svg file and display an 
image of the contents of the file for the benefit of your assistant. As 
explained 

<link id="a1084" url="http://cnx.org/contents/9fe07552-485f-43e7-9753-87133cf60482">


here

</link>

, those images will be mirror images of 
the actual images so that your assistant can emboss the image from the back of 
the paper and you can explore it from the front.

</para>




<para id="p1011">
I will also display a non-mirror-image version of the image so that your 
assistant can easily read the text in the image.

</para>




</section>
<section id="h21005">
<title>
<emphasis id="What_is_SVG" effect="bold">

What is SVG 

<emphasis id="em1003" effect="italics">
(Scalable Vector Graphics)

</emphasis>
?

</emphasis>


</title>




<para id="p1012">
The shortest answer that I can come up with is that SVG is a technology that 
makes it possible for a blind student to create technical drawings. If the 
student can imagine it, the student can draw it using SVG and drawing tools 
that I will provide in this module.

</para>




<para id="p1013">
<emphasis id="strong1000" effect="bold">
According to 


<link id="a1085" url="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">

Wikipedia

</link>


</emphasis>
</para>




<para id="p1014">
<emphasis id="em1004" effect="italics">
"Scalable Vector Graphics (SVG) is a family of specifications of an XML-based file format for describing two-dimensional vector graphics, both static and dynamic (i.e. interactive or animated).

</emphasis>
</para>




<para id="p1015">
<emphasis id="em1005" effect="italics">
The SVG specification is an open standard that has been under development by the World Wide Web Consortium (W3C) since 1999.

SVG images and their behaviors are defined in XML text files. This means that they can be searched, indexed, scripted and, if required, compressed.

</emphasis>
</para>




<para id="p1016">
<emphasis id="em1006" effect="italics">
<emphasis id="Since_they_are_XML_files" effect="bold">

Since they are XML files

</emphasis>

, SVG images can be created and edited with any text editor, but it is often more convenient to create these types of images with drawing programs such as 


</emphasis>
<link id="a1086" url="http://inkscape.org/">


<emphasis id="em1007" effect="italics">
Inkscape

</emphasis>
</link>


<emphasis id="em1008" effect="italics">
.

</emphasis>
</para>




<para id="p1017">
<emphasis id="em1009" effect="italics">
All major modern web browsers have at least some degree of support and 
render SVG markup directly, including Mozilla Firefox, Internet Explorer 9, 
Google Chrome and Safari. However, no earlier versions of Microsoft Internet 
Explorer (IE) support SVG natively."

</emphasis>
</para>




<para id="p1018">
<emphasis id="strong1001" effect="bold">
The SVG home page

</emphasis>
</para>




<para id="p1019">
The SVG home page is located at 

<link id="a1087" url="http://www.w3.org/TR/SVG/">


http://www.w3.org/TR/SVG/

</link>

 

</para>




<para id="p1020">
That is where you will find technical specifications for the many 
capabilities that SVG has to offer. Those capabilities are vast. In this module, 
you will learn to create SVG files to draw the following 

<emphasis id="basic_shapes" effect="bold">

basic shapes

</emphasis>

 
along with text:

</para>




<list id="ul1012" list-type="bulleted">

	

<item id="li1082">
line

</item>


	

<item id="li1083">
rectangle

</item>


	

<item id="li1084">
circle

</item>


	

<item id="li1085">
ellipse

</item>


	

<item id="li1086">
polyline

</item>


	

<item id="li1087">
polygon

</item>




</list>




<para id="p1021">
You will also learn how to manipulate certain aspects of the following


<emphasis id="attributes_" effect="bold">

attributes

</emphasis>

 on those shapes and on the text that you 
create:

</para>




<list id="ul1013" list-type="bulleted">

	

<item id="li1088">
stroke

</item>


	

<item id="li1089">
stroke-width

</item>


	

<item id="li1090">
stroke-opacity

</item>


	

<item id="li1091">
fill

</item>


	

<item id="li1092">
fill-opacity

</item>


	

<item id="li1093">
font-style

</item>


	

<item id="li1094">
font-weight

</item>




</list>




<para id="p1022">
While this barely scratches the surface in terms of overall SVG capability, 
it does provide a set of tools that will put you in good stead relative to creating 
drawings for your science, technology, engineering, and mathematics courses.

</para>




</section>
<section id="h21006">
<title>
<emphasis id="What_does_this_mean_to_you" effect="bold">

What does this mean to you?

</emphasis>


</title>




<para id="p1023">
Let me 

<link id="a1088" target-id="Since_they_are_XML_files">

refer back

</link>

 to the most 
important statement so far in this document:

</para>




<para id="p1024">
"

<emphasis id="em1010" effect="italics">
Since they are XML files, SVG images can be created and edited with any 
text editor

</emphasis>
"

</para>




<para id="p1025">
What this means is that if you can imagine a technical drawing in terms of 
objects created from the 

<link id="a1089" target-id="basic_shapes">

basic shapes

</link>

 listed above 
along with their 

<link id="a1090" target-id="attributes_">

attributes

</link>

, and you can mentally 
organize the sizes and positions of those objects in a drawing, you can use a 
text editor to create an SVG file, which, in turn can be used to render the 
drawing on the screen or on paper.

</para>




<para id="p1026">
<emphasis id="strong1002" effect="bold">
Using the SVG file

</emphasis>
</para>




<para id="p1027">
Once the drawing exists in the form of an SVG file, it can be printed and 
submitted as part of an assignment. Also, if you have access to the necessary 
equipment or assistance, it can be turned into a tactile drawing for you and 
other blind students to explore by touch.

</para>




<para id="p1028">
You can also use the file format converter at


<link id="a1091" url="http://www.online-utility.org/image_converter.jsp">


http://www.online-utility.org/image_converter.jsp

</link>

 to convert the file to 
other formats such as 

<emphasis id="png_and_jpeg" effect="bold">

png and jpeg

</emphasis>

. This makes it possible for you to use 
the drawing for other purposes, such as conversion to sound using software that 
is available at 

<link id="a1092" url="http://www.seeingwithsound.com/winvoice.htm">


http://www.seeingwithsound.com/winvoice.htm

</link>

. 

</para>




<para id="p1029">
And last but not least, if you happen to have access to the


<link id="a1093" url="http://www.viewplus.com/solutions/touch-audio-learning/">

IVEO learning 
system

</link>

, the SVG files that you create can be used with that system to be 
explored by touch and sound.

</para>




<para id="p1030">
Even though you may be blind or visually impaired and you may never have drawn 
anything in your life, don't let that stop you. If you can imagine it, you can 
draw it using SVG. My purpose in publishing this module is to help you develop 
that skill.

</para>




</section>
<section id="h21007">
<title>
<emphasis id="The_first_example_drawing" effect="bold">

Sample drawing

</emphasis>


</title>




<para id="p1031">
Before going any further, I am going to provide the SVG files for a sample 
drawing that I will discuss in detail later. Hopefully, you can ask your 
assistant to print the file named 

<emphasis id="strong1003" effect="bold">
Svg21a1r.svg

</emphasis>
 and create a 
tactile version of the drawing as described


<link id="a1094" url="http://cnx.org/contents/9fe07552-485f-43e7-9753-87133cf60482">


here

</link>

. 

</para>




<para id="p1032">
<emphasis id="strong1004" effect="bold">
Tactile graphics

</emphasis>
</para>




<para id="p1033">
The file named 

<emphasis id="strong1005" effect="bold">
Svg21a1r.svg

</emphasis>
 contains a mirror image of the 
image that I created for this discussion. You should have downloaded that file 


<link id="a1095" target-id="you_will_need_to">

earlier

</link>

. 

<link id="a1096" target-id="Figure_1">

Figure 1

</link>

 shows the mirror image that is contained in that file for the benefit of your assistant who will create the tactile graphic for this 
discussion.

</para>




<table id="table1000" summary="This is a table." pgwide="1">
<tgroup cols="1">


	

<thead id="thead1000">

		

<row id="tr1000">

			

<entry id="th1000">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

. Mirror image from the file 
			named Svg21a1r.svg. 

</entry>

		

</row>

	

</thead>




<tbody id="tbody1000">

	

<row id="tr1001">

		

<entry id="td1000">

		

<media id="media1000" alt="Missing image" display="block">
<image id="img1000" mime-type="image/png" src="../../media/Svg21a1ra.png" width="600" height="464"/>
</media>


		

</entry>

	

</row>



</tbody>




</tgroup>
</table>




<para id="p1034">
<link id="a1097" target-id="Figure_2">

Figure 2

</link>

 shows a 
non-mirror-image version of the same image.

</para>




<table id="table1001" summary="This is a table." pgwide="1">
<tgroup cols="1">


	

<thead id="thead1001">

		

<row id="tr1002">

			

<entry id="th1001">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

. Non-mirror-image version of 
			the image from the file named Svg21a1r.svg.

</entry>

		

</row>

	

</thead>




<tbody id="tbody1001">

	

<row id="tr1003">

		

<entry id="td1001">

		

<media id="media1001" alt="Missing image" display="block">
<image id="img1001" mime-type="image/png" src="../../media/Svg21a1rb.png" width="600" height="464"/>
</media>


		

</entry>

	

</row>



</tbody>




</tgroup>
</table>




<para id="p1035">
This image contains only one line of text. It reads 

<emphasis id="em1011" effect="italics">
"Friction free table"

</emphasis>
 
and appears on the side of a table. Therefore, I didn't provide a key-value 
table as described


<link id="a1098" url="http://cnx.org/contents/9fe07552-485f-43e7-9753-87133cf60482">


here

</link>

. 

</para>




<para id="p1036">
<emphasis id="strong1006" effect="bold">
<emphasis id="What_does_the_image_show" effect="bold">

What does the image show

</emphasis>

?

</emphasis>
</para>




<para id="p1037">
Just in case you were unable to get a tactile version of the image, I will 
describe it to you. It isn't very complicated.

</para>




<para id="p1038">
There are three objects connected together with a cord. Two of the objects, 
each of which has a square shape, are setting on top of a table. The left end of 
the table is attached to a 
wall. The right end of the table is supported by a table leg.

</para>




<para id="p1039">
The leftmost object on the table is tied to the wall. The 
two objects on the table are tied to one another.

</para>




<para id="p1040">
The third object is shaped like a triangle. It is connected to the 
rightmost square object with a cord, but it is not setting on the table. 
Instead, there is a pulley wheel connected to the rightmost corner of the table. 
The triangular object is hanging from the cord, which threads up and over the 
pulley wheel and connects to the rightmost square object, which is to the left 
of the pulley wheel.

</para>




<para id="p1041">
A label on the table reads 

<emphasis id="em1012" effect="italics">
"Friction free table."

</emphasis>
</para>




<para id="p1042">
<emphasis id="strong1007" effect="bold">
Straight lines, rectangles, circles, and polygons

</emphasis>
</para>




<para id="p1043">
As you may have observed from the description, this drawing is made up entirely of straight lines, 
rectangles, a polygon for the triangle, and a circle for the pulley wheel. This 
is representative of many of the drawing used to illustrate physics concepts.

</para>




<para id="p1044">
This drawing uses all of the basic shapes described 

<link id="a1099" target-id="basic_shapes">


earlier

</link>

 except for the ellipse and the polyline. Different line thicknesses 
were used to visually differentiate the objects from one another.

</para>




<para id="p1045">
<emphasis id="strong1008" effect="bold">
Processing an SVG file

</emphasis>
</para>




<para id="p1046">
An SVG file can be processed using an SVG processor, such as IE 9 or Firefox 
5 to convert the commands contained in the SVG file into a drawing. If you are 
using a browser as your SVG processor, the drawing will appear in the browser 
window, from which it can be viewed and/or printed.

</para>




<para id="p1047">
In addition, some products, such as 

<link id="a1100" url="http://inkscape.org/">

Inkscape

</link>

 
and the 

<link id="a1101" url="http://www.viewplus.com/solutions/touch-audio-learning/">


IVEO learning system

</link>

 can read the SVG file directly and use it to provide additional 
benefits such as converting text labels and shapes into spoken words and displaying the 
drawing in tactile form using an embossing graphic printer. 

</para>




<para id="p1048">
Also, as mentioned 

<link id="a1102" target-id="png_and_jpeg">

earlier

</link>

, you can convert the 
SVG file to other formats, such as png and jpeg for use with other programs such 
as 

<link id="a1103" url="http://www.seeingwithsound.com/winvoice.htm">

The vOICe Learning 
Edition

</link>

.

</para>




</section>
<section id="h21008">
<title>
<emphasis id="Two_approaches" effect="bold">

Two approaches

</emphasis>


</title>




<para id="p1049">
There are at least two approaches for using SVG to create a drawing like 
this:

</para>




<list id="ul1014" list-type="bulleted">

	

<item id="li1095">
writing raw SVG code

</item>


	

<item id="li1096">
using drawing tools

</item>




</list>




<section id="h31002">
<title>
<emphasis id="Writing_raw_SVG_code" effect="bold">

Writing raw SVG code

</emphasis>


</title>




<para id="p1050">
As mentioned earlier, the contents of an SVG file are plain text. That text can 
be produced using any plain text editor, such as Windows Notepad.

</para>




<para id="p1051">
If you are willing to study the specifications at


<link id="a1104" url="http://www.w3.org/TR/SVG/">

http://www.w3.org/TR/SVG/

</link>

, you can use 
your text editor to create raw SVG code and accomplish everything that is 
possible using SVG. However, that can be a daunting task.

</para>








<para id="p1052">
<link id="a1105" target-id="Listing_1">

Listing 1

</link>

 shows the raw SVG code that produced the image shown in 

<link id="a1106" target-id="Figure_2">

Figure 2

</link>

. 
You might conclude that you don't want to spend your time writing text like that 
when you should be studying physics concepts instead.

</para>





<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1002">
<row id="tr1004">
<entry id="th1002">



<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Raw SVG code for Figure 2.


</entry>
</row>
</thead>




<tbody id="tbody1002">
<row id="tr1005">
<entry id="td1002">



<code id="pre1000" display="block">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1" 
 width="990" height="765"&gt;
  &lt;title&gt;Document Title&lt;/title&gt;
  &lt;rect fill="none" stroke="black" stroke-width="3" 
   x="1" y="1" width="987" height="762"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  &lt;line stroke="black" stroke-width="9" 
   x1="45" y1="720" x2="945" y2="720"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  &lt;line stroke="black" stroke-width="9" 
   x1="90" y1="720" x2="90" y2="90"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  &lt;rect fill="none" stroke="black" stroke-width="3" 
   x="90" y="405" width="630" height="90"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  &lt;rect fill="none" stroke="black" stroke-width="3" 
   x="585" y="495" width="45" height="225"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  &lt;rect fill="none" stroke="black" stroke-width="5" 
   x="180" y="225" width="180" height="180"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  &lt;rect fill="none" stroke="black" stroke-width="5" 
   x="450" y="225" width="180" height="180"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  &lt;polygon stroke="black" stroke-width="5" fill="none" 
   points="675 675 855 675 765 540 "&gt;
    &lt;title&gt;polygon&lt;/title&gt;
  &lt;/polygon&gt;
  &lt;rect fill="none" stroke="black" stroke-width="5" 
   x="709" y="346" width="35" height="95"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  &lt;circle fill="none" stroke="black" stroke-width="5" 
   cx="725" cy="355" r="41"&gt;
    &lt;title&gt;circle&lt;/title&gt;
  &lt;/circle&gt;
  &lt;line stroke="black" stroke-width="3" 
   x1="90" y1="315" x2="180" y2="315"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  &lt;line stroke="black" stroke-width="3" 
   x1="360" y1="315" x2="450" y2="315"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  &lt;line stroke="black" stroke-width="3" 
   x1="630" y1="315" x2="725" y2="315"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  &lt;line stroke="black" stroke-width="3" 
   x1="765" y1="360" x2="765" y2="540"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  &lt;text fill="black" stroke="black" 
   x="225" y="468" font-size="32" font-family="arial"&gt;
    Friction free table.
  &lt;/text&gt;
&lt;/svg&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1053">
Although the concepts involved in manually writing SVG code aren't complicated, the 
process is very tedious and you are very likely to make errors in the coding 
process.

</para>




</section>
<section id="h31003">
<title>
<emphasis id="Using_drawing_tools" effect="bold">

Using drawing tools

</emphasis>


</title>




<para id="p1054">
Fortunately for sighted students, drawing tools are readily available that 
make the creation of SVG drawings relatively easy. One of the best is the free 
open source SVG graphics editor named 

<link id="a1107" url="http://inkscape.org/">

Inkscape

</link>

. Sighted students are able to use 
that editor with the mouse and the keyboard to create drawings in a visual drawing 
environment.

</para>




<para id="p1055">
I use 

<link id="a1108" url="http://inkscape.org/">

Inkscape

</link>

 all of the time to create SVG files for the drawings that I 
need. However, I don't know of any blind students that have attempted to use 

<link id="a1109" url="http://inkscape.org/">

Inkscape

</link>

. 
It doesn't look to me like it would be very accessible for blind students. 
However, it is free, so you should give it a try just so you will know for sure.

</para>




<para id="p1056">
<emphasis id="strong1009" effect="bold">
SVG drawing editors for blind students

</emphasis>
</para>




<para id="p1057">
I am unaware of any SVG drawing editors that are designed for use by blind 
students who are unable to use a mouse. 

<emphasis id="em1013" effect="italics">
(If you know of any, please let me 
know.)

</emphasis>
 Therefore, I will provide an SVG graphics library that I have 
designed specifically for blind students in this module. It isn't 

<link id="a1110" url="http://inkscape.org/">

Inkscape

</link>

; far 
from it. However, it does not require the use of a mouse and it works well. It is my hope that the 
use of my library 
will make it possible for you to use SVG to draw the diagrams that you need to 
successfully pursue your coursework in physics and other technical areas.

</para>




<para id="p1058">
<emphasis id="strong1010" effect="bold">
Seeking improvements in the interface

</emphasis>
</para>




<para id="p1059">
There are a large number of excellent blind programmers scattered around the 
world. It is my hope that one or more of those programmers will pick up the challenge 
and develop an improved interface for the library that will make it even easier for blind 
students to draw 
using SVG.

</para>




<para id="p1060">
I would like to see a JavaScript version of an SVG drawing editor designed 
for use by blind students. That's not because JavaScript is my favorite 
programming language, which it isn't. That is because JavaScript has the lowest 
barrier to entry of any programming environment that I am aware of. 

<emphasis id="em1014" effect="italics">
(See my 
JavaScript module 


<link id="a1111" url="http://cnx.org/contents/9eb6aeee-1604-4bde-b81f-912622f036d1">

here

</link>

.

</emphasis>
</para>




<para id="p1061">
<emphasis id="strong1011" effect="bold">
How does it work?

</emphasis>
 

</para>




<para id="p1062">
Basically what I will provide in this module is an SVG graphics library 
written in the Java programming language along with a template and instructions 
for you to use in writing Java programs to produce the drawings that you need.

</para>




<para id="p1063">
I don't have a fancy interface to go with the graphics library. 
Instead, I will provide a template that you can use to write a new Java program 
for each new drawing. The procedure will be to write a program that encapsulates 
the drawing that you have in your mind. When you run the program, it will 
produce the SVG file that describes your drawing.

</para>




<para id="p1064">
If you determine that there are errors in your drawing, you can make 
corrections to your program code and run it again to get a new version of the SVG 
file.

</para>




<para id="p1065">
<emphasis id="strong1012" effect="bold">
Raw SVG code versus my SVG graphics library

</emphasis>
</para>




<para id="p1066">
Only you can decide whether you prefer to write raw SVG code or you prefer to 
use the graphics library. I will present examples of both in this module.

</para>




<para id="p1067">
I will 
point out one major advantage of using the library, however. Once you learn how to write Java programs that incorporate the library to 
create drawings, there is nothing to prevent you from expanding those programs 
to also solve physics problem and draw graphs of the results.

</para>




<para id="p1068">
For example, suppose you have a physics assignment to compute and draw the 
trajectory of a projectile. Using raw SVG code, you would first need to compute 
and save the coordinates of the projectile as a set of incremental data points. Then you could write raw SVG code incorporating that data to draw the 
trajectory.

</para>




<para id="p1069">
Using the library, you could write a program that would compute and also draw the trajectory 
in a single operation. In my 
opinion, that would be a much cleaner solution to the assignment.

</para>




</section>
</section>
<section id="h21009">
<title>
<emphasis id="Sample_program" effect="bold">

Sample program

</emphasis>


</title>




<para id="p1070">
A complete listing of the program named 

<emphasis id="strong1013" effect="bold">
Svg21a.java

</emphasis>
, that was used to produce 
the drawing shown in 

<link id="a1112" target-id="Figure_2">

Figure 2

</link>

 is provided in 

<link id="a1113" target-id="Listing_25">

Listing 25

</link>

 near the end of the 
module.

</para>




<para id="p1071">
This program requires access to the SVG graphics library in the file 
named 

<emphasis id="strong1014" effect="bold">
SvgLib21.java

</emphasis>
. A complete listing of this 
program is shown in 

<link id="a1114" target-id="Listing_26">

Listing 26

</link>

 near the end of the module.

</para>




<para id="p1072">
This program also requires access to the 
free 


<link id="a1115" url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">

Java 
Development Kit

</link>

, version 6 or 
later, which I will also discuss later.

</para>




<para id="p1073">
Finally, this program also requires access to 

<link id="a1116" url="http://www.jdom.org/">

JDOM 1.1.1

</link>

, which 
is free, and which I will also 
discuss later.

</para>




<para id="p1074">
<emphasis id="strong1015" effect="bold">
Purpose of the program

</emphasis>
</para>




<para id="p1075">
The primary purpose of this program is to demonstrate the use of my SVG 
graphics library in the file named 

<emphasis id="strong1016" effect="bold">
SvgLib21

</emphasis>
. It uses that library to draw an 
abbreviated version of a mass-pulley system shown in Figure 4 of the module that 
you will find


<link id="a1117" url="http://cnx.org/contents/16d1b592-5126-458f-883e-3ae872cc18c0#Figure_4">


here

</link>

.

</para>




<para id="p1076">
The drawing in that module contains several lines of text. However, this 
program draws only one line of text. Otherwise,
the drawing produced by this program is the same as
the drawing used in
that module titled 


<link id="a1118" url="http://cnx.org/contents/16d1b592-5126-458f-883e-3ae872cc18c0">

Force and Motion -- Units of Force

</link>

.

</para>




<para id="p1077">
I created the original drawing using 

<link id="a1119" url="http://inkscape.org/">

Inkscape

</link>

. I 
created this drawing using 
my SVG graphics library and the program that I am about to discuss.

</para>




<para id="p1078">
This program was tested using J2SE 6, JDOM 1.1.1, and Firefox 5
running under Windows Vista Home Premium Edition.

</para>




<section id="h31004">
<title>
<emphasis id="Beginning_of_the_program_named_Svg21a" effect="bold">

Beginning of the program named Svg21a.java

</emphasis>


</title>




<para id="p1079">
I will explain this program in fragments and explain how you can write 
similar programs to create the SVG drawing files that you need. The first 
fragment, which shows the beginning of the program, is shown in 

<link id="a1120" target-id="Listing_2">

Listing 2

</link>

.

</para>




<para id="p1080">
<emphasis id="em1015" effect="italics">
(Note that complete listings are provided in 

<link id="a1121" target-id="Listing_25">


Listing 25

</link>

, 

<link id="a1122" target-id="Listing_26">

Listing 26

</link>

, and 

<link id="a1123" target-id="Listing_27">


Listing 27

</link>

. That code is ready to copy into your editor, save as Java source 
code files, compile, and run as explained under 

</emphasis>



<link id="a1124" target-id="Creating_compiling_and_running_Java_programs">


<emphasis id="em1016" effect="italics">
Writing, compiling, 
and running Java programs

</emphasis>
</link>


<emphasis id="em1017" effect="italics">
.)

</emphasis>
</para>




<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1003">
<row id="tr1006">
<entry id="th1003">



<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Beginning of the program named Svg21a.java.


</entry>
</row>
</thead>




<tbody id="tbody1003">
<row id="tr1007">
<entry id="td1003">



<code id="pre1001" display="block">
import java.io.*;
import org.jdom.*;

public class Svg21a{
  public static void main(String[] args){

    //DO NOT MODIFY ANY OF THE CODE ABOVE THIS LINE.
    //##################################################//
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>




<para id="p1081">
<emphasis id="strong1017" effect="bold">
Java comments

</emphasis>
</para>




<para id="p1082">
Whenever you see the following character sequence, //, in a Java program, the 
text that follows to the end of the line is a comment. That is to say, that text 
is meant to provide information to a human reader and is ignored by the 
computer.

</para>




<para id="p1083">
<link id="a1125" target-id="Listing_2">

Listing 2

</link>

 contains two comments. I will use many 
more comments in subsequent listings to help explain the code.

</para>




<para id="p1084">
<emphasis id="strong1018" effect="bold">
Java program files

</emphasis>
</para>




<para id="p1085">
Java programs are simply text files with the file name of your choice and an 
extension of .java. You can create those files using any plain text editor. I will explain later how you 
can "compile" 
those files to create 
executable programs.

</para>




<para id="p1086">
If this were a module on computer programming, I would explain what is meant 
by the program code in 

<link id="a1126" target-id="Listing_2">

Listing 2

</link>

. However, since this is not a module on 
computer program, I will simply tell you to replicate the text shown in 

<link id="a1127" target-id="Listing_2">

Listing 2

</link>

 at the beginning of your Java program file with one exception. That 
exception has to do with the name of the program and the name of the file.

</para>




<para id="p1087">
<emphasis id="strong1019" effect="bold">
The name of the program

</emphasis>
</para>




<para id="p1088">
The name of this program is 

<emphasis id="strong1020" effect="bold">
Svg21a

</emphasis>
. You can see that name on the line 
following the word class in 

<link id="a1128" target-id="Listing_2">

Listing 2

</link>

. You can use just about any name you want 
as long as the first character is a letter and the remainder of the name 
contains only letters and numbers. However, the name of the program, as shown in 


<link id="a1129" target-id="Listing_2">

Listing 2

</link>

, must match the name of the file containing that program except that 
the file name must have an extension of .java.

</para>




<para id="p1089">
For example, this program named 

<emphasis id="strong1021" effect="bold">
Svg21a

</emphasis>
 is stored in a file named 


<emphasis id="strong1022" effect="bold">
Svg21a.java

</emphasis>
.

</para>




<para id="p1090">
Also be aware that everything in Java, including program names and file names, 
is case sensitive. By that I mean that Joe is not the same as jOe, which is not 
the same as joE.

</para>




</section>
<section id="h31005">
<title>
<emphasis id="Create_a_drawing_canvas" effect="bold">

Create a drawing canvas

</emphasis>


</title>




<para id="p1091">
The next code fragment is shown at the top of 

<link id="a1130" target-id="Listing_3">

Listing 3

</link>

. This fragment contains two Java 
programming statements.

</para>




<para id="p1092">
<emphasis id="em1018" effect="italics">
(Usually Java program statements end with a semicolon.)

</emphasis>
</para>




<para id="p1093">
These must be the first two statements in your Java 
program and they must appear only once.

</para>




<para id="p1094">
The first statement, down to the semicolon, creates the canvas on which the 
drawing will appear. You may modify this statement as explained below.

</para>




<para id="p1095">
The second statement at the bottom of 

<link id="a1131" target-id="Listing_3">

Listing 3

</link>

 is a housekeeping statement and must not be modified.

</para>




<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1004">
<row id="tr1008">
<entry id="th1004">



<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Create a drawing canvas.


</entry>
</row>
</thead>




<tbody id="tbody1004">
<row id="tr1009">
<entry id="td1004">



<code id="pre1002" display="block">
    //ONLY THE CODE BELOW THIS LINE CAN BE MODIFIED
    
    //CREATE A DRAWING CANVAS
    //This must be the first statement that you write in
    // the program and it must appear only once.
    //The following statement creates a canvas that is
    // 8.5x11 inches in size in a landscape layout.
    Element svg = SvgLib21.makeSvg(ns,
                                   "Document Title",
                                   11,  //width
                                   8.5  //height
                                   );
                                          

    //DO NOT MODIFY THE FOLLOWING STATEMENT
    //This statement must immediately follow the call to
    // the makeSvg method above and this statement MUST
    // NOT BE MODIFIED.
    Document doc = new Document(svg,docType);
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1096">
<emphasis id="strong1023" effect="bold">
What does this code mean?

</emphasis>
</para>




<para id="p1097">
    The first statement shown in 

<link id="a1132" target-id="Listing_3">

Listing 3

</link>

 creates a canvas that is
    8.5 x 11 inches in size in a landscape layout. In other words, the canvas has 
a width of 11 inches and a height of 8.5 inches. When you print the drawing 
produced on this canvas, it should fit perfectly on 8.5x11 inch paper provided 
that you tell the printer to print in landscape 

<emphasis id="em1019" effect="italics">
(as opposed to portrait)

</emphasis>
 mode.

</para>




<para id="p1098">
    If your printer uses 8.5 x 11 inch paper, the only modification that you 
will want to make to this statement is to sometimes reverse the order of the 
width and height values 

<emphasis id="em1020" effect="italics">
(see the comments)

</emphasis>
 to cause the canvas to accommodate portrait mode.

</para>




<para id="p1099">
    If your printer uses larger paper, you might want to modify the width and 
height values to accommodate the actual size of your printer paper.

</para>




<para id="p1100">
    When modifying the width and height values in the first statement, be 
careful not to delete the comma and DON'T MAKE ANY OTHER CHANGES to the 
statement with the possible exception of the 

<emphasis id="em1021" effect="italics">
"Document Title"

</emphasis>
 parameter 
discussed below.

</para>




<para id="p1101">
    

<emphasis id="strong1024" effect="bold">
<emphasis id="The_Document_Title" effect="bold">

The Document Title

</emphasis>


</emphasis>
</para>




<para id="p1102">
    The 

<emphasis id="strong1025" effect="bold">
makeSvg

</emphasis>
 method, and most of the other 

<emphasis id="strong1026" effect="bold">

makeZzz

</emphasis>
 methods discussed below have a parameter that adds a title to 
the SVG element. These parameters have default values in this program such as 
"Document Title", "line", "rectangle", "circle", "ellipse", "polyline", and 
"polygon".

</para>




<para id="p1103">
    The purpose of these parameters is to provide compatibility with the 
speaking capability of the


<link id="a1133" url="http://www.viewplus.com/solutions/touch-audio-learning/">

IVEO viewer

</link>

.

</para>




<para id="p1104">
    If the output SVG file is opened in the


<link id="a1134" url="http://www.viewplus.com/solutions/touch-audio-learning/">

IVEO viewer

</link>

, 
the title for the 

<emphasis id="strong1027" effect="bold">
svg 

</emphasis>
element is spoken when the user opens the 
file.

</para>




<para id="p1105">
    The titles for the individual shapes are spoken by the


<link id="a1135" url="http://www.viewplus.com/solutions/touch-audio-learning/">

IVEO viewer

</link>

 
when the user touches a corresponding shape on the touchpad or clicks on that 
shape on the screen.

</para>




<para id="p1106">
    If the SVG file won't be used with the


<link id="a1136" url="http://www.viewplus.com/solutions/touch-audio-learning/">

IVEO viewer

</link>

, 
just leave the title strings unchanged. If the SVG file will be used with the 
the 

<link id="a1137" url="http://www.viewplus.com/solutions/touch-audio-learning/">

IVEO 
viewer

</link>

, you can modify those strings to cause the viewer to speak whatever 
titles you choose. 

<emphasis id="em1022" effect="italics">
(Don't remove the quotation marks if you modify the title 
string.)

</emphasis>
</para>




<para id="p1107">
    You can read more about this capability under


<link id="a1138" target-id="The_SVG_graphics_library">

The SVG graphics library

</link>

.

</para>




<para id="p1108">
<emphasis id="strong1028" effect="bold">
SVG code to create a canvas

</emphasis>
</para>




<para id="p1109">
If you were to delete all of the remaining code in 

<link id="a1139" target-id="Listing_25">

Listing 25

</link>

 down to but not 
including the statement that writes the output SVG file, the resulting SVG code 
would be that shown in 

<link id="a1140" target-id="Listing_4">

Listing 4

</link>

.

</para>




<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1005">
<row id="tr1010">
<entry id="th1005">



<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. SVG code to create a canvas.


</entry>
</row>
</thead>




<tbody id="tbody1005">
<row id="tr1011">
<entry id="td1005">



<code id="pre1003" display="block">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1" 
 width="990" height="765"&gt;
  &lt;title&gt;Document Title&lt;/title&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1110">
<emphasis id="strong1029" effect="bold">
The width and the height of the canvas

</emphasis>
</para>




<para id="p1111">
The first three lines of text in 

<link id="a1141" target-id="Listing_4">

Listing 4

</link>

 constitute housekeeping 
information that you needn't worry about. It will always be the same. 

</para>




<para id="p1112">
The fourth and fifth lines of text in 

<link id="a1142" target-id="Listing_4">

Listing 4

</link>

 define the width and height 
of the canvas.

</para>




<para id="p1113">
As you can see, the width is set to a value of 990 and the height is set to a 
value of 765.

</para>




<para id="p1114">
The last line of text in 

<link id="a1143" target-id="Listing_4">

Listing 4

</link>

 is the 

<emphasis id="strong1030" effect="bold">

title

</emphasis>
 element discussed 

<link id="a1144" target-id="The_Document_Title">

earlier

</link>

.

</para>




<para id="p1115">
<emphasis id="strong1031" effect="bold">
SVG units

</emphasis>
</para>




<para id="p1116">
SVG doesn't inherently deal with dimensions in inches 

<emphasis id="em1023" effect="italics">
(although it is 
possible to specify inches when you define the value for a size attribute.)

</emphasis>
. Instead, it deals with 
dimensions in something that I will refer to as "SVG units", and for reasons 
that I am unable to explain, there appear to be 90 SVG units per inch or 35.43 
SVG units per centimeter.

</para>




<para id="p1117">
Thus, a width of 990 

<emphasis id="em1024" effect="italics">
(as shown in 

</emphasis>
 

<link id="a1145" target-id="Listing_4">


<emphasis id="em1025" effect="italics">
Listing 4

</emphasis>
</link>

) corresponds to a width of 11 inches and a height of 765 
corresponds to a height of 8.5 inches.

</para>




<para id="p1118">
If you elect to write raw SVG code for you drawings, you will need to think 
in terms of SVG units instead of inches 

<emphasis id="em1026" effect="italics">
(or write all of the size attribute 
values something like "8.5in")

</emphasis>
. However, I designed my SVG graphics library 
so that you can think in terms of inches instead of SVG units without having to 
remember to specify the units for every size value.

</para>




</section>
<section id="h31006">
<title>
<emphasis id="Draw_a_rectangular_border_on_the_canvas" effect="bold">

Draw a rectangular border on the canvas

</emphasis>


</title>




<para id="p1119">
The Java code in 

<link id="a1146" target-id="Listing_5">

Listing 5

</link>

 draws a rectangular border on the canvas by creating an 
SVG element of type 

<emphasis id="strong1032" effect="bold">
rect

</emphasis>
 

<emphasis id="em1027" effect="italics">
(for rectangle)

</emphasis>
.

</para>




<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1006">
<row id="tr1012">
<entry id="th1006">



<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Draw a rectangular border on the canvas.


</entry>
</row>
</thead>




<tbody id="tbody1006">
<row id="tr1013">
<entry id="td1006">



<code id="pre1004" display="block">
    //Draw a rectangular border on the canvas.
    Element border = SvgLib21.makeRect(svg,
            ns,
            "rectangle",//title
            0.015,/lower-left x-coordinate in inches
            0.015,//lower-left y-coordinate in inches
            10.97,//width in inches
            8.47  //height in inches
            );

</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1120">
<emphasis id="strong1033" effect="bold">
What are you allowed to change?

</emphasis>
</para>




<para id="p1121">
There are only six things that you are allowed to change in the code in 


<link id="a1147" target-id="Listing_5">

Listing 5

</link>

 

<emphasis id="em1028" effect="italics">
(pay attention to the comments)

</emphasis>
:

</para>




<list id="ol1000" list-type="enumerated">

	

<item id="li1097">
The name of the 

<emphasis id="strong1034" effect="bold">
rect

</emphasis>
 element, which is 

<emphasis id="strong1035" effect="bold">
border

</emphasis>
 in 
	

<link id="a1148" target-id="Listing_5">

Listing 5

</link>

. 

<emphasis id="em1029" effect="italics">
(Later on, I will refer to this as an 
	object instead of an element.)

</emphasis>
</item>


	

<item id="li1098">
The title for the element, which is 

<emphasis id="strong1036" effect="bold">
"rectangle"

</emphasis>
 in 
	

<link id="a1149" target-id="Listing_5">

Listing 5

</link>

.

</item>


	

<item id="li1099">
The x-coordinate of the lower-left corner of the rectangle, which is 
	0.015 inches in 

<link id="a1150" target-id="Listing_5">

Listing 5

</link>

.

</item>


	

<item id="li1100">
The y-coordinate of the lower-left corner of the rectangle, which is 
	0.015 inches in 

<link id="a1151" target-id="Listing_5">

Listing 5

</link>

.

</item>


	

<item id="li1101">
The width of the rectangle, which is 10.97 inches in 

<link id="a1152" target-id="Listing_5">

Listing 5

</link>

.

</item>


	

<item id="li1102">
The height of the rectangle, which is 8.47 inches in 

<link id="a1153" target-id="Listing_5">

Listing 5

</link>

.

</item>




</list>




<para id="p1122">
<emphasis id="strong1037" effect="bold">
Multiple rect elements

</emphasis>
</para>




<para id="p1123">
You can replicate this code to define as many 

<emphasis id="strong1038" effect="bold">
rect

</emphasis>
 elements as you need in your 
drawing so long as you provide a unique name for each element 

<emphasis id="em1030" effect="italics">
(object)

</emphasis>
.

</para>




<para id="p1124">
<emphasis id="strong1039" effect="bold">
The size of the rectangle

</emphasis>
</para>




<para id="p1125">
If you carefully examine the values that I specified for the coordinates of 
the lower-left corner, the width, and the height, you will see that I made the 
rectangle slightly smaller than the size of the paper so that it will fit just 
inside the edges of the paper.

</para>




<para id="p1126">
<emphasis id="strong1040" effect="bold">
SVG code to draw a rectangle

</emphasis>
</para>




<para id="p1127">
The use of the Java code in 

<link id="a1154" target-id="Listing_5">

Listing 5

</link>

 to draw a rectangle results in the 
SVG code shown in 

<link id="a1155" target-id="Listing_6">

Listing 6

</link>

.

</para>




<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1007">
<row id="tr1014">
<entry id="th1007">



<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. SVG code to draw a rectangle.


</entry>
</row>
</thead>




<tbody id="tbody1007">
<row id="tr1015">
<entry id="td1007">



<code id="pre1005" display="block">
  &lt;rect fill="none" stroke="black" stroke-width="1" 
   x="1" y="1" width="987" height="762"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1128">
In order 
to force the SVG code to fit in this publication format, it was necessary for me 
to insert a line break following the "1". Those two lines were originally a 
single line in the SVG code.

</para>




<para id="p1129">
<emphasis id="strong1041" effect="bold">
View my tutorials

</emphasis>
</para>




<para id="p1130">
SVG is simply one flavor of something called XML. I have 
published hundreds of online tutorials on Java programming, XML, and SVG. If you 
are interested in reading what I have to say in those tutorials, just Google the 
following keywords:

</para>




<list id="ul1015" list-type="bulleted">

	

<item id="li1103">
Richard Baldwin Java

</item>


	

<item id="li1104">
Richard Baldwin XML

</item>


	

<item id="li1105">
Richard Baldwin SVG

</item>




</list>




<para id="p1131">
<emphasis id="strong1042" effect="bold">
The rect element

</emphasis>
</para>




<para id="p1132">
The four lines in 

<link id="a1156" target-id="Listing_6">

Listing 6

</link>

 that begin with an angle 
bracket followed by 

<emphasis id="strong1043" effect="bold">
rect

</emphasis>
 and end with /&gt; constitute what is called 
an XML element named 

<emphasis id="strong1044" effect="bold">
rect

</emphasis>
.

</para>




<para id="p1133">
The 

<emphasis id="strong1045" effect="bold">
rect

</emphasis>
 element has a 

<emphasis id="strong1046" effect="bold">
title

</emphasis>
 element as its 
content. The 

<emphasis id="strong1047" effect="bold">
title

</emphasis>
 element has the word 

<emphasis id="strong1048" effect="bold">
rectangle

</emphasis>
 
as its content.

</para>




<para id="p1134">
<emphasis id="strong1049" effect="bold">
The attributes of the rect element

</emphasis>
</para>




<para id="p1135">
The following items are known as the 

<emphasis id="strong1050" effect="bold">
attributes

</emphasis>
 of the


<emphasis id="strong1051" effect="bold">
rect

</emphasis>
 element:

</para>




<list id="ul1016" list-type="bulleted">

	

<item id="li1106">
fill

</item>


	

<item id="li1107">
stroke

</item>


	

<item id="li1108">
stroke-width

</item>


	

<item id="li1109">
x

</item>


	

<item id="li1110">
y

</item>


	

<item id="li1111">
width

</item>


	

<item id="li1112">
height

</item>




</list>




<para id="p1136">
<emphasis id="strong1052" effect="bold">
The attribute values

</emphasis>
</para>




<para id="p1137">
The text that appears in quotation marks, such as "762" are known as the 
values of the attribute to which they are joined by an equals character "=".

</para>




<para id="p1138">
<emphasis id="strong1053" effect="bold">
How does it all work?

</emphasis>
</para>




<para id="p1139">
When an SVG processor, such as the one incorporated into Firefox 5, sees an 
SVG/XML element named 

<emphasis id="strong1054" effect="bold">
rect

</emphasis>
 in an SVG file, it knows that 
it needs to draw a rectangle. It then looks to the attributes and their values 
to determine other aspects of that rectangle.

</para>




<para id="p1140">
For example, in this case, the SVG processor is told to draw a rectangle 
consisting of an outline only

<emphasis id="em1031" effect="italics">
 (fill="none")

</emphasis>
.

</para>




<para id="p1141">
The color of the outline is to be black 

<emphasis id="em1032" effect="italics">
(stroke="black")

</emphasis>
.

</para>




<para id="p1142">
The thickness of the outline is to be a single SVG unit 

<emphasis id="em1033" effect="italics">
(stroke-width="1")

</emphasis>
.

</para>




<para id="p1143">
The lower-left corner of the outline is to be very close to the origin when 
described in SVG units 

<emphasis id="em1034" effect="italics">
(x="1" and y="1")

</emphasis>
.

</para>




<para id="p1144">
The width of the rectangle is to be 987 SVG units 

<emphasis id="em1035" effect="italics">
(width="987")

</emphasis>
, and the 
height of the rectangle is to be 762 SVG units 

<emphasis id="em1036" effect="italics">
(height="762")

</emphasis>
.

</para>




<para id="p1145">
If you were to run the program at this point, open the output SVG file in Firefox 
5, and print the result, you would have a blank sheet of paper with a black 
outline barely inside the edges of the paper. 

<emphasis id="em1037" effect="italics">
(Note, however, that on my 
system, there is a margin of approximately one-half inch at the bottom of the 
paper.)

</emphasis>
</para>




</section>
<section id="h31007">
<title>
<emphasis id="Draw_the_floor_and_the_wall" effect="bold">

Draw the floor and the wall

</emphasis>


</title>




<para id="p1146">
In the image shown in 

<link id="a1157" target-id="Figure_2">

Figure 2

</link>

, the floor consists of a line parallel to the 
horizontal axis near the bottom of the drawing. The wall consists of a line 
parallel to the vertical axis near the left side of the drawing. The Java code 
in 

<link id="a1158" target-id="Listing_7">

Listing 7

</link>

 causes those two lines to be drawn.

</para>




<para id="p1147">
<emphasis id="em1038" effect="italics">
(All coordinate values and dimensions given in this and the following Java 
code are in inches, so I will stop mentioning that at this point.)

</emphasis>
</para>




<table id="table1008" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1008">
<row id="tr1016">
<entry id="th1008">



<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. Draw the floor and the wall.


</entry>
</row>
</thead>




<tbody id="tbody1008">
<row id="tr1017">
<entry id="td1008">



<code id="pre1006" display="block">
    //Draw the floor.
    Element floor = SvgLib21.makeLine(svg,
            ns,
            "line",//title
            0.5, //x-coordinate of one end of line
            0.5, //y-coordinate of one end of line
            10.5,//x-coordinate of other end of line
            0.5  //y-coordinate of other end of line
            );

    //Draw the wall.
    Element wall = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      1.0,
                                      0.5,
                                      1.0,
                                      7.5
                                      );
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1148">
<emphasis id="strong1055" effect="bold">
Two SVG elements of type line

</emphasis>
</para>




<para id="p1149">
Each of the Java statements in 

<link id="a1159" target-id="Listing_7">

Listing 7

</link>

 causes a new SVG element of type 
line to be created. The first element is named 

<emphasis id="strong1056" effect="bold">
floor

</emphasis>
 in the Java code. 

<emphasis id="em1039" effect="italics">
(

<emphasis id="I_will_have_more_to_say_about_element_names_later" effect="bold">

I 
will have more to say about element names later

</emphasis>

.)

</emphasis>
 The second element is 
named 

<emphasis id="strong1057" effect="bold">
wall

</emphasis>
. 

<emphasis id="em1040" effect="italics">
(See 

</emphasis>
 

<link id="a1160" target-id="Listing_8">


<emphasis id="em1041" effect="italics">
Listing 8

</emphasis>
</link>


<emphasis id="em1042" effect="italics">
 later.)

</emphasis>
</para>




<para id="p1150">
<emphasis id="strong1058" effect="bold">
What can you change?

</emphasis>
</para>




<para id="p1151">
As before, there are only six things that you are allowed to change in each 
of the Java statements in 

<link id="a1161" target-id="Listing_7">

Listing 7

</link>

:

</para>




<list id="ul1017" list-type="bulleted">

	

<item id="li1113">
The names of the line elements 

<emphasis id="em1043" effect="italics">
(floor and wall in 

</emphasis>
 

<link id="a1162" target-id="Listing_7">


	

<emphasis id="em1044" effect="italics">
Listing 7

</emphasis>
</link>


<emphasis id="em1045" effect="italics">
.)

</emphasis>
</item>


	

<item id="li1114">
The values of the titles 

<emphasis id="em1046" effect="italics">
("line" in 

</emphasis>
 

<link id="a1163" target-id="Listing_7">


	

<emphasis id="em1047" effect="italics">
Listing 7

</emphasis>
</link>


<emphasis id="em1048" effect="italics">
.)

</emphasis>
</item>


	

<item id="li1115">
The x and y coordinate values for one end of each line.

</item>


	

<item id="li1116">
The x and y coordinate values for the other end of each line.

</item>




</list>




<para id="p1152">
If you examine the x and y coordinate values for one end of the line named 
floor in 

<link id="a1164" target-id="Listing_7">

Listing 7

</link>

 

<emphasis id="em1049" effect="italics">
(0.5, 0.5)

</emphasis>
, you will see that one end of the line is near 
the origin at the lower-left corner of the drawing.

</para>




<para id="p1153">
If you examine the x and y coordinate values for the other end of the line 
named 

<emphasis id="strong1059" effect="bold">
floor

</emphasis>
 

<emphasis id="em1050" effect="italics">
(10.5, 0.5)

</emphasis>
, you will see that the other end of the line is near the 
lower-right corner of the drawing. Furthermore, both y-coordinate values are 
0.5, meaning that the line is parallel to the horizontal axis as desired.

</para>




<para id="p1154">
A similar analysis of the line named 

<emphasis id="strong1060" effect="bold">
wall

</emphasis>
 will reveal that it intersects the 
floor near the left end at 

<emphasis id="em1051" effect="italics">
(1.0, 0.5)

</emphasis>
 and is parallel to the vertical axis.

</para>




<para id="p1155">
<emphasis id="strong1061" effect="bold">
SVG code to draw a line

</emphasis>
</para>




<para id="p1156">
<link id="a1165" target-id="Listing_8">

Listing 8

</link>

 shows the two 

<emphasis id="strong1062" effect="bold">
line

</emphasis>
 elements created by the Java 
code shown in 

<link id="a1166" target-id="Listing_7">

Listing 7

</link>

.

</para>




<table id="table1009" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1009">
<row id="tr1018">
<entry id="th1009">



<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

. SVG code to draw a line.


</entry>
</row>
</thead>




<tbody id="tbody1009">
<row id="tr1019">
<entry id="td1009">



<code id="pre1007" display="block">
  &lt;line stroke="black" stroke-width="1" 
   x1="45" y1="720" x2="945" y2="720"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  
  &lt;line stroke="black" stroke-width="1" 
   x1="90" y1="720" x2="90" y2="90"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1157">
<emphasis id="strong1063" effect="bold">
An explanation of element names

</emphasis>
</para>




<para id="p1158">
I promised 

<link id="a1167" target-id="I_will_have_more_to_say_about_element_names_later">


earlier

</link>

 that I would have more to say about element names later. That time 
has come.

</para>




<para id="p1159">
SVG elements don't have names, other than the name that defines the 
type of element such as 

<emphasis id="strong1064" effect="bold">
rect

</emphasis>
 

<emphasis id="em1052" effect="italics">
(

</emphasis>
<link id="a1168" target-id="Listing_6">


<emphasis id="em1053" effect="italics">
Listing 6

</emphasis>
</link>

) and 

<emphasis id="strong1065" effect="bold">
line

</emphasis>
 


<emphasis id="em1054" effect="italics">
(

</emphasis>
<link id="a1169" target-id="Listing_8">


<emphasis id="em1055" effect="italics">
Listing 8

</emphasis>
</link>

). Names such as 

<emphasis id="strong1066" effect="bold">
border

</emphasis>
 


<emphasis id="em1056" effect="italics">
(

</emphasis>
<link id="a1170" target-id="Listing_5">


<emphasis id="em1057" effect="italics">
Listing 5

</emphasis>
</link>

), 

<emphasis id="strong1067" effect="bold">
floor

</emphasis>
 
and 

<emphasis id="strong1068" effect="bold">
wall

</emphasis>
<emphasis id="em1058" effect="italics">
 (

</emphasis>
<link id="a1171" target-id="Listing_7">


<emphasis id="em1059" effect="italics">
Listing 7

</emphasis>
</link>

) are purely Java mechanisms for keeping 
track of the different elements in the drawing.

</para>




<para id="p1160">
<emphasis id="em1060" effect="italics">
(I should have been referring border, floor, and wall as objects instead of elements in the Java 
code earlier, but I didn't want to make things even more confusing than they may already 
be.)

</emphasis>
</para>




<para id="p1161">
<emphasis id="strong1069" effect="bold">
The names disappear

</emphasis>
</para>




<para id="p1162">
By the time the Java code is converted into SVG code, those identifying names 
have disappeared and the SVG code consists of 

</para>




<list id="ul1018" list-type="bulleted">

	

<item id="li1117">
elements of specific types 

</item>


	

<item id="li1118">
having attributes with
	

<list id="ul1019" list-type="bulleted">

		

<item id="li1119">
specific names 

</item>


		

<item id="li1120">
and specific values.

</item>


	

</list>


	

</item>




</list>




<para id="p1163">
<emphasis id="em1061" effect="italics">
(There is also something in the SVG code called content, which is 
represented by the title element in 

</emphasis>
 

<link id="a1172" target-id="Listing_8">


<emphasis id="em1062" effect="italics">
Listing 8

</emphasis>
</link>


<emphasis id="em1063" effect="italics">
.)

</emphasis>
</para>




<para id="p1164">
<emphasis id="strong1070" effect="bold">
The line elements

</emphasis>
</para>




<para id="p1165">
The first SVG element named 

<emphasis id="strong1071" effect="bold">
line

</emphasis>
 in 

<link id="a1173" target-id="Listing_8">

Listing 8

</link>

 corresponds to 
the Java object named 

<emphasis id="strong1072" effect="bold">
floor

</emphasis>
 in 

<link id="a1174" target-id="Listing_7">

Listing 7

</link>

. The second SVG 
element named 

<emphasis id="strong1073" effect="bold">
line

</emphasis>
 in 

<link id="a1175" target-id="Listing_8">

Listing 8

</link>

 corresponds to the Java object 
named 

<emphasis id="strong1074" effect="bold">
wall

</emphasis>
 in 

<link id="a1176" target-id="Listing_7">

Listing 7

</link>

.

</para>




<para id="p1166">
<emphasis id="strong1075" effect="bold">
Attributes of the line elements

</emphasis>
</para>




<para id="p1167">
The stroke and stroke-width attributes in 

<link id="a1177" target-id="Listing_8">

Listing 8

</link>

 should already be 
familiar to you as should the coordinate attributes named x1, y1, x2, and y2.

</para>




<para id="p1168">
Unlike the SVG code for the rect element in 

<link id="a1178" target-id="Listing_6">

Listing 6

</link>

, where there 
was only one pair of coordinate attributes named x and y, a line element as 
shown in 

<link id="a1179" target-id="Listing_8">

Listing 8

</link>

 requires two sets of coordinate 
attributes. Therefore, the two sets are distinguished from one another by 
appending a 1 and a 2 to the basic attribute names of x and y 

<emphasis id="em1064" effect="italics">
(x1, y1, x2, 
and y2)

</emphasis>
.

</para>




<para id="p1169">
If you compare the coordinate attributes in 

<link id="a1180" target-id="Listing_8">

Listing 8

</link>

 with the coordinate 
values in the Java code in 

<link id="a1181" target-id="Listing_7">

Listing 7

</link>

, and convert from inches to SVG 
units, you should find that they match.

</para>




</section>
<section id="h31008">
<title>
<emphasis id="Drawing_more_rectangles" effect="bold">

Draw more rectangles

</emphasis>


</title>








<para id="p1170">
The Java code in 

<link id="a1182" target-id="Listing_9">

Listing 9

</link>

 causes four more rectangles to be drawn that represent 
the following objects in the drawing:

</para>




<list id="ul1020" list-type="bulleted">

	

<item id="li1121">
The top of the table on which two rectangular masses are setting.

</item>


	

<item id="li1122">
The table leg that supports the rightmost end of the table. 

<emphasis id="em1065" effect="italics">
(The 
	leftmost end is 
	attached to the wall.) 

</emphasis>
 

</item>


	

<item id="li1123">
One of the rectangular masses, referred to as Mass C. 

<emphasis id="em1066" effect="italics">
(This mass sets on 
	top of the table closest to the wall on the left end of the table.)

</emphasis>
</item>


	

<item id="li1124">
The other rectangular mass referred to as Mass B. 

<emphasis id="em1067" effect="italics">
(This mass sets on top 
	of the table closest to the rightmost end of the table away from the wall.)

</emphasis>
</item>




</list>




<table id="table1010" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1010">
<row id="tr1020">
<entry id="th1010">



<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

. Draw more rectangles.


</entry>
</row>
</thead>




<tbody id="tbody1010">
<row id="tr1021">
<entry id="td1010">



<code id="pre1008" display="block">
    //Draw the table top.
    Element tableTop = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      1.0,
                                      3.0,
                                      7.0,
                                      1.0
                                      );


    //Draw the table leg.
    Element tableLeg = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      6.5,
                                      0.5,
                                      0.5,
                                      2.5
                                      );
    
    
    //Draw Mass C
    Element massC = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      2.0,
                                      4.0,
                                      2.0,
                                      2.0
                                      );  
    
    
    //Draw Mass B
    Element massB = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      5.0,
                                      4.0,
                                      2.0,
                                      2.0
                                      );
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1171">
<emphasis id="strong1076" effect="bold">
The corresponding SVG code

</emphasis>
</para>




<para id="p1172">
The Java code in 

<link id="a1183" target-id="Listing_9">

Listing 9

</link>

 causes the four 

<emphasis id="strong1077" effect="bold">
rect

</emphasis>
 
elements shown in 

<link id="a1184" target-id="Listing_10">

Listing 10

</link>

 to be created in the 
output SVG code.

</para>




<table id="table1011" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1011">
<row id="tr1022">
<entry id="th1011">



<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

. SVG code to draw more rectangles.


</entry>
</row>
</thead>




<tbody id="tbody1011">
<row id="tr1023">
<entry id="td1011">



<code id="pre1009" display="block">
  &lt;rect fill="none" stroke="black" stroke-width="1" 
   x="90" y="405" width="630" height="90"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  
  &lt;rect fill="none" stroke="black" stroke-width="1" 
   x="585" y="495" width="45" height="225"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  
  &lt;rect fill="none" stroke="black" stroke-width="1" 
   x="180" y="225" width="180" height="180"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
  
  &lt;rect fill="none" stroke="black" stroke-width="1" 
   x="450" y="225" width="180" height="180"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1173">
You already know all about drawing rectangles, so no further explanation of 
the code in 

<link id="a1185" target-id="Listing_9">

Listing 9

</link>

 and 

<link id="a1186" target-id="Listing_10">

Listing 10

</link>

 should be needed.

</para>




</section>
<section id="h31009">
<title>
<emphasis id="Draw_a_polygon" effect="bold">

Draw a polygon

</emphasis>


</title>




<para id="p1174">
The next task is to draw a triangular object that represents Mass C in the 
drawing. This is accomplished by the Java code in 

<link id="a1187" target-id="Listing_11">

Listing 11

</link>

 that causes a polygon, 
in the shape of a triangle, to be drawn.

</para>




<table id="table1012" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1012">
<row id="tr1024">
<entry id="th1012">



<emphasis id="Listing_11" effect="bold">

Listing 11

</emphasis>

. Draw a polygon.


</entry>
</row>
</thead>




<tbody id="tbody1012">
<row id="tr1025">
<entry id="td1012">



<code id="pre1010" display="block">
    //Draw Mass A
    Element massA = SvgLib21.makePolygon(
               svg,
               ns,
               "polygon",
               new double[]{
                 7.5, 1.0,//x-y coordinate pair
                 9.5, 1.0,//x-y coordinate pair
                 8.5, 2.5 //x-y coordinate pair
               });
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1175">
<emphasis id="strong1078" effect="bold">
What can you modify?

</emphasis>
</para>




<para id="p1176">
You can modify the following items in the Java code shown in 

<link id="a1188" target-id="Listing_11">

Listing 11

</link>

.

</para>




<list id="ul1021" list-type="bulleted">

	

<item id="li1125">
The name of the object 

<emphasis id="em1068" effect="italics">
(

<emphasis id="strong1079" effect="bold">
massA

</emphasis>
 in 

</emphasis>
 

<link id="a1189" target-id="Listing_11">


<emphasis id="em1069" effect="italics">
Listing 11

</emphasis>
</link>

).

</item>


	

<item id="li1126">
The title 

<emphasis id="em1070" effect="italics">
(

<emphasis id="strong1080" effect="bold">
"polygon"

</emphasis>
 in 

<link id="a1190" target-id="Listing_11">

Listing 11

</link>

).

</emphasis>
</item>


	

<item id="li1127">
The number of x-y coordinate pairs in the list of x-y coordinate pairs 
	along with the values of the coordinates.

</item>




</list>




<para id="p1177">
<emphasis id="strong1081" effect="bold">
What is a polygon?

</emphasis>
</para>




<para id="p1178">
In SVG terminology, a polygon is a drawing that consists of a series of 
points in two-dimensional space connected by line segments. An additional line 
segment is automatically drawn 
from the last point to the first point. For example, triangles, pentagons, 
and hexagons are polygons.

</para>




<para id="p1179">
<emphasis id="strong1082" effect="bold">
What is a polyline?

</emphasis>
</para>




<para id="p1180">
In SVG terminology, a polyline is exactly like a polygon except that a line 
segment is not automatically drawn to connect the last point to the first point. 


</para>




<para id="p1181">
There are no polyline elements in this example drawing, but there is one in the 
program for a different drawing shown in 

<link id="a1191" target-id="Listing_27">

Listing 27

</link>

. The  
Java code for drawing a polyline is the same as the Java code for drawing a 
polygon. The difference between the two occurs when the SVG processor draws the 
shapes and either does, or does not automatically connect the last point to the 
first point.

</para>




<para id="p1182">
<emphasis id="strong1083" effect="bold">
The most versatile shape

</emphasis>
</para>




<para id="p1183">
    The polyline is the most versatile of all of the basic shapes. With enough patience, it can be used to draw any
    shape that can be drawn with curved lines. To
    draw a curved line using polyline elements, approximate it using a large
    number of short line segments. For example, polyline elements provide an 
ideal mechanism for drawing the kind of shapes that are commonly referred to as 
"curves" in math, physics, and engineering courses. By this, I mean a drawing 
that shows how a dependent variable behaves relative to an independent variable.

</para>




<para id="p1184">
    

<emphasis id="strong1084" effect="bold">
Drawing the polygon 

<emphasis id="em1071" effect="italics">
(or the polyline)

</emphasis>
</emphasis>
</para>




<para id="p1185">
    Getting back to the Java code in 

<link id="a1192" target-id="Listing_11">

Listing 11

</link>

, you can insert any number 


<emphasis id="em1072" effect="italics">
(two or more)

</emphasis>
 of x-y coordinate-pairs inside
    the curly brackets 

<emphasis id="em1073" effect="italics">
(but you must insert them in pairs)

</emphasis>
. Line segments will 
be drawn from the first coordinate location to the second, from the second to 
the third, and so on. 

<emphasis id="em1074" effect="italics">
(Of course there need to be two or more coordinate pairs 
in order for things to make sense.)

</emphasis>
</para>




<para id="p1186">
    If you examine the coordinate values shown in 

<link id="a1193" target-id="Listing_11">

Listing 11

</link>

, you will see 
that they define the vertices of a triangle whose base is parallel to the 
horizontal axis. Since this is a polygon, it will be drawn as a closed triangle 
with lines for all three sides. If it were a polyline, it would not be drawn as 
a closed triangle. Instead, only two lines would be drawn and the third side of 
the triangle would be open.

</para>




<para id="p1187">
<emphasis id="strong1085" effect="bold">
SVG code to draw a polygon

</emphasis>
</para>




<para id="p1188">
<link id="a1194" target-id="Listing_12">

Listing 12

</link>

 shows the SVG code produced by the Java code in 

<link id="a1195" target-id="Listing_11">

Listing 11

</link>

.

</para>




<table id="table1013" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1013">
<row id="tr1026">
<entry id="th1013">



<emphasis id="Listing_12" effect="bold">

Listing 12

</emphasis>

. SVG code to draw a polygon.


</entry>
</row>
</thead>




<tbody id="tbody1013">
<row id="tr1027">
<entry id="td1013">



<code id="pre1011" display="block">
  &lt;polygon stroke="black" stroke-width="1" fill="none" 
   points="675 675 855 675 765 540 "&gt;
    &lt;title&gt;polygon&lt;/title&gt;
  &lt;/polygon&gt;</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1189">
<emphasis id="strong1086" effect="bold">
The attribute named points

</emphasis>
</para>




<para id="p1190">
The polygon element in 

<link id="a1196" target-id="Listing_12">

Listing 12

</link>

 contains a new attribute name that you 
haven't seen before: 

<emphasis id="strong1087" effect="bold">
points

</emphasis>
.

</para>




<para id="p1191">
As you have probably figured out by now, the value of the attribute 
named points is a 
series of numeric values, separated by spaces, that represent the x-y coordinate pairs in 

<link id="a1197" target-id="Listing_11">

Listing 11

</link>

, 
converted from inches to SVG units.

</para>




<para id="p1192">
Hopefully by now you are beginning to see patterns that relate the Java code 
to the resulting SVG code.

</para>




</section>
<section id="h31010">
<title>
<emphasis id="Draw_the_pulley_support" effect="bold">

Draw the rectangular pulley support

</emphasis>


</title>




<para id="p1193">
The drawing in 

<link id="a1198" target-id="Figure_2">

Figure 2

</link>

 shows a pulley connected to the rightmost end of the 
table. The drawing of the pulley consists of a rectangle as the support member 
and a circle as the pulley wheel. The Java code to draw the pulley support is 
shown in 

<link id="a1199" target-id="Listing_13">

Listing 13

</link>

.

</para>




<table id="table1014" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1014">
<row id="tr1028">
<entry id="th1014">



<emphasis id="Listing_13" effect="bold">

Listing 13

</emphasis>

. Draw the rectangular pulley support.


</entry>
</row>
</thead>




<tbody id="tbody1014">
<row id="tr1029">
<entry id="td1014">



<code id="pre1012" display="block">    //Draw pulley support
    Element pullySupport = SvgLib21.makeRect(svg,
                                             ns,
                                             "rectangle",
                                             7.883,
                                             3.595,
                                             0.392,
                                             1.06
                                             );</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1194">
The Java code in 

<link id="a1200" target-id="Listing_13">

Listing 13

</link>

 simply draws another rectangle, so it shouldn't need 
further explanation.

</para>




</section>
<section id="h31011">
<title>
<emphasis id="Draw_a_circle" effect="bold">

Draw a circle

</emphasis>


</title>




<para id="p1195">
The Java code in 

<link id="a1201" target-id="Listing_14">

Listing 14

</link>

 draws a circle to serve as the pulley wheel in the 
drawing.

</para>




<table id="table1015" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1015">
<row id="tr1030">
<entry id="th1015">



<emphasis id="Listing_14" effect="bold">

Listing 14

</emphasis>

. Draw a circle.


</entry>
</row>
</thead>




<tbody id="tbody1015">
<row id="tr1031">
<entry id="td1015">



<code id="pre1013" display="block">
    //Draw the pulley wheel.
    Element pulleyWheel = SvgLib21.makeCircle(
               svg,
               ns,
               "circle",
               8.05, //x-coordinate of center of circle
               4.56, //y-coordinate of center of circle
               0.45  //radius of circle
               );

</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1196">
<emphasis id="strong1088" effect="bold">
What are you allowed to change?

</emphasis>
</para>




<para id="p1197">
There are only four things that you are allowed to change in the code in 


<link id="a1202" target-id="Listing_14">

Listing 14

</link>

:

</para>




<list id="ol1001" list-type="enumerated">

	

<item id="li1128">
The name of the 

<emphasis id="strong1089" effect="bold">
circle

</emphasis>
 object, which is 

<emphasis id="strong1090" effect="bold">

	pulleyWheel

</emphasis>
 in 

<link id="a1203" target-id="Listing_14">

Listing 14

</link>

.

</item>


	

<item id="li1129">
The title 

<emphasis id="em1075" effect="italics">
(

<emphasis id="strong1091" effect="bold">
"circle"

</emphasis>
 in 

<link id="a1204" target-id="Listing_14">

Listing 14

</link>

)

</emphasis>
.

</item>


	

<item id="li1130">
The value of the x-coordinate of the center of the circle.

</item>


	

<item id="li1131">
The value of the y-coordinate of the center of the circle.

</item>


	

<item id="li1132">
The radius of the circle.

</item>




</list>




<para id="p1198">
You will need to examine the coordinate values for the center of the circle 
along with the radius of the circle and imagine how the position and size of the 
circle relates to the right end of the table top in 

<link id="a1205" target-id="Figure_2">

Figure 2

</link>

. 


<emphasis id="em1076" effect="italics">
(Or hopefully, get 
a tactile version of the drawing and explore it by touch.)

</emphasis>
</para>




<para id="p1199">
<emphasis id="strong1092" effect="bold">
SVG code to draw a circle

</emphasis>
</para>




<para id="p1200">
<link id="a1206" target-id="Listing_15">

Listing 15

</link>

 shows the SVG code produced by the Java code in 

<link id="a1207" target-id="Listing_14">

Listing 14

</link>

.

</para>




<table id="table1016" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1016">
<row id="tr1032">
<entry id="th1016">



<emphasis id="Listing_15" effect="bold">

Listing 15

</emphasis>

. SVG code to draw a circle.


</entry>
</row>
</thead>




<tbody id="tbody1016">
<row id="tr1033">
<entry id="td1016">



<code id="pre1014" display="block">
  &lt;circle fill="none" stroke="black" stroke-width="1" 
   cx="725" cy="355" r="41"&gt;
    &lt;title&gt;circle&lt;/title&gt;
  &lt;/circle&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1201">
By now, you should see the pattern and there should be no need to explain the 
relationship between the attributes of the circle element and the parameter 
values in the call to the 

<emphasis id="strong1093" effect="bold">
makeCircle

</emphasis>
 method in 

<link id="a1208" target-id="Listing_14">

Listing 14

</link>

.

</para>




</section>
<section id="h31012">
<title>
<emphasis id="Draw_more_lines" effect="bold">

Draw more lines

</emphasis>


</title>




<para id="p1202">
The earlier section titled 

<link id="a1209" target-id="What_does_the_image_show">

What does the 
image show

</link>

 describes how three cords are used to tie the masses to one 
another and to tie the leftmost mass to the wall. This is accomplished using the four 
calls to the Java 

<emphasis id="strong1094" effect="bold">
makeLine

</emphasis>
 method shown in 

<link id="a1210" target-id="Listing_16">

Listing 16

</link>

.

</para>




<table id="table1017" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1017">
<row id="tr1034">
<entry id="th1017">



<emphasis id="Listing_16" effect="bold">

Listing 16

</emphasis>

. Draw more lines.


</entry>
</row>
</thead>




<tbody id="tbody1017">
<row id="tr1035">
<entry id="td1017">



<code id="pre1015" display="block">
    //Draw cord from wall to Mass C
    Element cordR = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      1.0,
                                      5.0,
                                      2,
                                      5.0
                                      );


    //Draw cord from Mass C to Mass B
    Element cordQ = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      4.0,
                                      5.0,
                                      5.0,
                                      5.0
                                      );


    //Draw cord from Mass B to the top of the pulley.
    Element cordP1 = SvgLib21.makeLine(svg,
                                       ns,
                                      "line",
                                       7.0,
                                       5.0,
                                       8.05,
                                       5.0
                                       );


    //Draw the cord from the right side of the pulley to
    // Mass A
    Element cordP2 = SvgLib21.makeLine(svg,
                                       ns,
                                      "line",
                                       8.5,
                                       4.5,
                                       8.5,
                                       2.5
                                       );

</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1203">
There is nothing new in 

<link id="a1211" target-id="Listing_16">

Listing 16

</link>

.

</para>




<para id="p1204">
<emphasis id="strong1095" effect="bold">
SVG code to draw more lines

</emphasis>
</para>








<para id="p1205">
The Java code in 

<link id="a1212" target-id="Listing_16">

Listing 16

</link>

 produces 
the SVG code shown in 

<link id="a1213" target-id="Listing_17">

Listing 17

</link>

.

</para>




<table id="table1018" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1018">
<row id="tr1036">
<entry id="th1018">



<emphasis id="Listing_17" effect="bold">

Listing 17

</emphasis>

. SVG code to draw more lines.


</entry>
</row>
</thead>




<tbody id="tbody1018">
<row id="tr1037">
<entry id="td1018">



<code id="pre1016" display="block">
  &lt;line stroke="black" stroke-width="1" 
   x1="90" y1="315" x2="180" y2="315"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  
  &lt;line stroke="black" stroke-width="1" 
   x1="360" y1="315" x2="450" y2="315"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  
  &lt;line stroke="black" stroke-width="1" 
   x1="630" y1="315" x2="725" y2="315"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
  
  &lt;line stroke="black" stroke-width="1" 
   x1="765" y1="360" x2="765" y2="540"&gt;
    &lt;title&gt;line&lt;/title&gt;
  &lt;/line&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1206">
There is also nothing new in 

<link id="a1214" target-id="Listing_17">

Listing 17

</link>

.

</para>




</section>
<section id="h31013">
<title>
<emphasis id="Change_line_thicknesses" effect="bold">

Change line thicknesses

</emphasis>


</title>




<para id="p1207">
With the exception of text to be discussed shortly, we have now created an 
element for every object that we need in our drawing. 

</para>




<para id="p1208">
As you may have noticed, the value of the 

<emphasis id="strong1096" effect="bold">
stroke-width

</emphasis>
 
attribute for every element created so far has been "1". That is the default 
value. We may not be satisfied with that default value in all cases. We may prefer that 
some of the lines that describe the geometrical objects be thicker than lines 
that describe other geometrical objects.

</para>




<para id="p1209">
My SVG graphics library provides a method named 

<emphasis id="strong1097" effect="bold">
setStrokeWidth

</emphasis>
 
that we can use to adjust the stroke-width attribute values for an element 
before the final output SVG file is written. 

<emphasis id="em1077" effect="italics">
(As you will see if you examine


</emphasis>
 


<link id="a1215" target-id="Listing_27">


<emphasis id="em1078" effect="italics">
Listing 27

</emphasis>
</link>


<emphasis id="em1079" effect="italics">
, the library provides methods that let you adjust other attribute 
values as well.)

</emphasis>
</para>




<para id="p1210">
<emphasis id="strong1098" effect="bold">
Set the stroke-width

</emphasis>
</para>




<para id="p1211">
The line thickness is controlled by the value of the 

<emphasis id="strong1099" effect="bold">
stroke-width

</emphasis>
 attribute 
in the SVG element that causes the geometrical object to be drawn.

</para>




<para id="p1212">
<link id="a1216" target-id="Listing_18">

Listing 18

</link>

 contains a series of Java statements that set new values for the 
stroke-width attribute for each of a variety of objects. Since the statements are all 
essentially the same, I will discuss only the first one.

</para>




<table id="table1019" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1019">
<row id="tr1038">
<entry id="th1019">



<emphasis id="Listing_18" effect="bold">

Listing 18

</emphasis>

. Set the stroke-width attribute value.


</entry>
</row>
</thead>




<tbody id="tbody1019">
<row id="tr1039">
<entry id="td1019">



<code id="pre1017" display="block">
    SvgLib21.setStrokeWidth(
         border,//name of the object of interest
         0.03   //new value for the stroke-width attribute
         );
    
    SvgLib21.setStrokeWidth(floor,0.1);
    SvgLib21.setStrokeWidth(wall,0.1);
    SvgLib21.setStrokeWidth(tableTop,0.03);
    SvgLib21.setStrokeWidth(tableLeg,0.03);
    SvgLib21.setStrokeWidth(massC,0.05); 
    SvgLib21.setStrokeWidth(massB,0.05);
    SvgLib21.setStrokeWidth(massA,0.05);
    SvgLib21.setStrokeWidth(pullySupport,0.05);
    SvgLib21.setStrokeWidth(pulleyWheel,0.05);
    SvgLib21.setStrokeWidth(cordR,0.03);
    SvgLib21.setStrokeWidth(cordQ,0.03);
    SvgLib21.setStrokeWidth(cordP1,0.03);
    SvgLib21.setStrokeWidth(cordP2,0.03);

</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1213">
<emphasis id="strong1100" effect="bold">
What are you allowed to change?

</emphasis>
</para>




<para id="p1214">
There are only two things that you can change in a call to the 

<emphasis id="strong1101" effect="bold">
setStrokeWidth

</emphasis>
 
method as shown in 

<link id="a1217" target-id="Listing_18">

Listing 18

</link>

:

</para>




<list id="ul1022" list-type="bulleted">

	

<item id="li1133">
The name of the Java object of interest 

<emphasis id="em1080" effect="italics">
(

</emphasis>
<emphasis id="strong1102" effect="bold">
<emphasis id="em1081" effect="italics">
border

</emphasis>
</emphasis>
<emphasis id="em1082" effect="italics">
 for the first call in
	

</emphasis>
 
	

<link id="a1218" target-id="Listing_18">


<emphasis id="em1083" effect="italics">
Listing 18

</emphasis>
</link>

).

</item>


	

<item id="li1134">
The new value for the 

<emphasis id="strong1103" effect="bold">
stroke-width

</emphasis>
 attribute in the SVG element that 
	corresponds to the specified Java object 

<emphasis id="em1084" effect="italics">
(0.03 for the first call in Listing 
	18)

</emphasis>
.

</item>




</list>




<para id="p1215">
Recall that 

<emphasis id="strong1104" effect="bold">
border

</emphasis>
 is the name of the Java object that is used to draw a 
rectangular border on the canvas 

<emphasis id="em1085" effect="italics">
(see 

</emphasis>
 

<link id="a1219" target-id="Listing_5">


<emphasis id="em1086" effect="italics">
Listing 5

</emphasis>
</link>

).

</para>




<para id="p1216">
Recall also that the initial default value of the stroke-width attribute for 
the rect element was equal to "1" 

<emphasis id="em1087" effect="italics">
(see 

</emphasis>
 

<link id="a1220" target-id="Listing_6">




<emphasis id="em1088" effect="italics">
Listing 6

</emphasis>
</link>

).

</para>




<para id="p1217">
To see the effect of the first call to the 

<emphasis id="strong1105" effect="bold">
setStrokeWidth

</emphasis>
 method in 

<link id="a1221" target-id="Listing_18">

Listing 18

</link>

, go back and take a look at the final SVG output code in 

<link id="a1222" target-id="Listing_1">

Listing 1

</link>

. Pay 
particular attention to the first 

<emphasis id="strong1106" effect="bold">
rect

</emphasis>
 element.

</para>




<para id="p1218">
<emphasis id="strong1107" effect="bold">
Modified stroke-width attribute value

</emphasis>
</para>




<para id="p1219">
I have reproduced that 

<emphasis id="strong1108" effect="bold">
rect

</emphasis>
 element in 

<link id="a1223" target-id="Listing_19">

Listing 19

</link>

 for convenient 
viewing.

</para>




<table id="table1020" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1020">
<row id="tr1040">
<entry id="th1020">



<emphasis id="Listing_19" effect="bold">

Listing 19

</emphasis>

. Modified stroke-width attribute value.


</entry>
</row>
</thead>




<tbody id="tbody1020">
<row id="tr1041">
<entry id="td1020">



<code id="pre1018" display="block">
  &lt;rect fill="none" stroke="black" stroke-width="3" 
   x="1" y="1" width="987" height="762"&gt;
    &lt;title&gt;rectangle&lt;/title&gt;
  &lt;/rect&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1220">
As mentioned earlier, the default value for the stroke-width attribute of the 
rect element shown in 

<link id="a1224" target-id="Listing_6">

Listing 6

</link>

 was "1". However, after I added the first call 
to the 

<emphasis id="strong1109" effect="bold">
setStrokeWidth

</emphasis>
 method in 

<link id="a1225" target-id="Listing_18">

Listing 18

</link>

 and re-ran the program, the attribute 
value was changed to "3" corresponding approximately to a line thickness of 0.03 
inch.

</para>




<para id="p1221">
If you compare the parameter values to the remaining calls to the 


<emphasis id="strong1110" effect="bold">
setStrokeWidth

</emphasis>
 method in 

<link id="a1226" target-id="Listing_18">

Listing 18

</link>

 with the final values of the stroke-width 
attribute values in 

<link id="a1227" target-id="Listing_1">

Listing 1

</link>

, they should all correspond accordingly.

</para>




</section>
<section id="h31014">
<title>
<emphasis id="Drawing_text" effect="bold">

Draw text

</emphasis>


</title>




<para id="p1222">
All that we have left to do in this program is to draw some text and write 
the output SVG file. 

</para>




<para id="p1223">
The Java code in 

<link id="a1228" target-id="Listing_20">

Listing 20

</link>

 can be used to draw one line of text.

</para>




<table id="table1021" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1021">
<row id="tr1042">
<entry id="th1021">



<emphasis id="Listing_20" effect="bold">

Listing 20

</emphasis>

. Draw text.


</entry>
</row>
</thead>




<tbody id="tbody1021">
<row id="tr1043">
<entry id="td1021">



<code id="pre1019" display="block">
    //Draw text
    Element textA = SvgLib21.makeText(
        svg,    
        ns,
        2.5,    //x-coordinate of beginning of text
        3.3,    //y-coordinate of beginning of text
        "arial",//font-family (optionally "")
        32,     //font size in points
        "Friction free table." //text to be drawn
        );
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1224">
<emphasis id="strong1111" effect="bold">
Usage

</emphasis>
</para>




<para id="p1225">
Begin by setting the name of the Java object 

<emphasis id="em1089" effect="italics">
(

</emphasis>
<emphasis id="strong1112" effect="bold">
<emphasis id="em1090" effect="italics">
textA

</emphasis>
</emphasis>
<emphasis id="em1091" effect="italics">
 in


</emphasis>
 

<link id="a1229" target-id="Listing_20">


<emphasis id="em1092" effect="italics">
Listing 20

</emphasis>
</link>


<emphasis id="em1093" effect="italics">
) 

</emphasis>
to the 
name that you prefer.

</para>




<para id="p1226">
Then set the x and y coordinate values for the location in the drawing where 
the text will be drawn. 
This specifies the location of the lower-left corner of the first character in 
the text string.

</para>




<para id="p1227">
Then set the name of the font family 

<emphasis id="em1094" effect="italics">
("

</emphasis>
<emphasis id="strong1113" effect="bold">
<emphasis id="em1095" effect="italics">
arial

</emphasis>
</emphasis>
<emphasis id="em1096" effect="italics">
" in


</emphasis>
 

<link id="a1230" target-id="Listing_20">


<emphasis id="em1097" effect="italics">
Listing 20

</emphasis>
</link>

) or 
optionally leave that name blank. If no name is set

<emphasis id="em1098" effect="italics">
 
("")

</emphasis>
 or an invalid name is set, a default font family will be used.

</para>




<para id="p1228">
Then set the font size to the desired font size in points 

<emphasis id="em1099" effect="italics">
(

</emphasis>
<emphasis id="strong1114" effect="bold">
<emphasis id="em1100" effect="italics">
32

</emphasis>
</emphasis>
<emphasis id="em1101" effect="italics">
 in


</emphasis>
 

<link id="a1231" target-id="Listing_20">


<emphasis id="em1102" effect="italics">
Listing 20

</emphasis>
</link>

).

</para>




<para id="p1229">
Finally, set the last parameter to the string of text that is to be drawn.

</para>




<para id="p1230">
Make sure that you include the quotation marks in both cases where they are 
used in 

<link id="a1232" target-id="Listing_20">

Listing 20

</link>

.

</para>




<para id="p1231">
Don't make any other changes to the code shown in 

<link id="a1233" target-id="Listing_20">

Listing 20

</link>

.

</para>




<para id="p1232">
<emphasis id="strong1115" effect="bold">
Setting the font style and font weight

</emphasis>
</para>




<para id="p1233">
By default the text is 

<emphasis id="strong1116" effect="bold">
normal

</emphasis>
 

<emphasis id="em1103" effect="italics">
(not bold, not italic, etc.)

</emphasis>
. My SVG graphics 
library provides methods by which you can change the weight and style of the 
text, such as making it bold and italic. 

<emphasis id="em1104" effect="italics">
(See usage instructions for those 
methods in 

</emphasis>
 

<link id="a1234" target-id="Listing_27">


<emphasis id="em1105" effect="italics">
Listing 27

</emphasis>
</link>


<emphasis id="em1106" effect="italics">
.)

</emphasis>
</para>





<para id="p1234">
<emphasis id="strong1117" effect="bold">
SVG code to draw text

</emphasis>
</para>




<para id="p1235">
<link id="a1235" target-id="Listing_21">

Listing 21

</link>

 shows the SVG code produced by the Java code in 

<link id="a1236" target-id="Listing_20">

Listing 20

</link>

.

</para>





<table id="table1022" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1022">
<row id="tr1044">
<entry id="th1022">



<emphasis id="Listing_21" effect="bold">

Listing 21

</emphasis>

. SVG code to draw text.


</entry>
</row>
</thead>




<tbody id="tbody1022">
<row id="tr1045">
<entry id="td1022">



<code id="pre1020" display="block">
  &lt;text fill="black" stroke="black" x="225" y="468" 
    font-size="32" font-family="arial"&gt;
      Friction free table.
  &lt;/text&gt;
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1236">
You should be able to recognize all of the attributes and their values shown 
in 

<link id="a1237" target-id="Listing_21">

Listing 21

</link>

.

</para>




<para id="p1237">
<emphasis id="strong1118" effect="bold">
The content of an element

</emphasis>
</para>





<para id="p1238">
There is something in 

<link id="a1238" target-id="Listing_21">

Listing 21

</link>

 that was not previously discussed in 
any detail -- content. 
The actual text, 

<emphasis id="em1107" effect="italics">
Friction free table

</emphasis>
, is not an attribute. Instead, it is what 
is called 

<emphasis id="strong1119" effect="bold">
content

</emphasis>
 in XML/SVG. 

</para>




<para id="p1239">
In addition, many of the earlier SVG code fragments had elements whose 
content consisted of a 

<emphasis id="strong1120" effect="bold">
title

</emphasis>
 element, which in turn had text 
content with words like 

<emphasis id="strong1121" effect="bold">
line

</emphasis>
, 

<emphasis id="strong1122" effect="bold">
polygon

</emphasis>
, etc.

</para>




<para id="p1240">
This isn't particularly important to you as a user 
of my SVG graphics library. However, if you elect to create drawings by writing 
raw SVG code, this is something that you will need to study a little more 
deeply.

</para>




</section>
<section id="h31015">
<title>
<emphasis id="Write_the_output_file" effect="bold">

Write the output file

</emphasis>


</title>




<para id="p1241">
If you elect to create your drawings by writing raw SVG code in a text 
editor, all you need to do to write the output file is to save the text file 
from inside the editor.

</para>




<para id="p1242">
However, if you elect to use my SVG graphics library and create your drawings 
by writing Java code, you need to include the code shown in 

<link id="a1239" target-id="Listing_22">

Listing 22

</link>

 to cause 
the final output SVG file to be written.

</para>




<para id="p1243">
<emphasis id="em1108" effect="italics">
(Don't include the .svg extension in the file name that you specify. It 
is added automatically.)

</emphasis>
</para>








<table id="table1023" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1023">
<row id="tr1046">
<entry id="th1023">



<emphasis id="Listing_22" effect="bold">

Listing 22

</emphasis>

. Write the output file.


</entry>
</row>
</thead>




<tbody id="tbody1023">
<row id="tr1047">
<entry id="td1023">



<code id="pre1021" display="block">
    //WRITE OUTPUT FILE
    SvgLib21.writePrettyFile("Svg21a",doc);

</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1244">
    This must be the last statement that you write in your program. Otherwise, you will get an incomplete file.

</para>




<para id="p1245">
    Set the value inside the quotation marks to the desired path and filename 
for the file.

</para>




<para id="p1246">
<emphasis id="em1109" effect="italics">
(Don't include the .svg extension in the file name that you specify. It 
is added automatically.)

</emphasis>
</para>








<para id="p1247">
    Don't make any other changes to the code in 

<link id="a1240" target-id="Listing_22">

Listing 22

</link>

.

</para>




<para id="p1248">
    The Java code in 

<link id="a1241" target-id="Listing_22">

Listing 22

</link>

 writes the output file with the name 


<emphasis id="strong1123" effect="bold">
Svg21.svg

</emphasis>
 in the folder from which the
    program is being executed 

<emphasis id="em1110" effect="italics">
(the current folder)

</emphasis>
. Because it is being written 
into the current folder, it isn't necessary to provide a path.

</para>




</section>
<section id="h31016">
<title>
<emphasis id="The_remaining_Java_code" effect="bold">

The remaining Java code

</emphasis>


</title>




<para id="p1249">
The remaining code that you will need to include in your Java program file is 
shown in 

<link id="a1242" target-id="Listing_23">

Listing 23

</link>

.

</para>




<para id="p1250">
Simply copy this code, without modifications, and paste it at the end of your 
file.

</para>








<table id="table1024" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1024">
<row id="tr1048">
<entry id="th1024">



<emphasis id="Listing_23" effect="bold">

Listing 23

</emphasis>

. The remaining Java code.


</entry>
</row>
</thead>




<tbody id="tbody1024">
<row id="tr1049">
<entry id="td1024">



<code id="pre1022" display="block">
    //ONLY THE CODE ABOVE THIS LINE CAN BE MODIFIED
    //##################################################//
    //DO NOT MODIFY ANY OF THE FOLLOWING CODE.    
  }//end main
  //----------------------------------------------------//

  //Create a String variable containing the namespace
  // URI to reduce the amount of typing that is required
  // later. Note that the variable name is short and
  // easy to type.
  static String ns = "http://www.w3.org/2000/svg";
  
  //For clarity, create strings containing the name of
  // the element that is constrained by the DTD (the
  // root element), the Public ID of the DTD, and the
  // System ID of the DTD.
  static String dtdConstrainedElement = "svg";
  static String dtdPublicID = "-//W3C//DTD SVG 1.1//EN";
  static String dtdSystemID = 
     "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd";
     
  
  static DocType docType = new DocType(
         dtdConstrainedElement,dtdPublicID,dtdSystemID);

}//end class 
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





</section>
</section>
<section id="h21010">
<title>
<emphasis id="The_SVG_graphics_library" effect="bold">

The SVG graphics library

</emphasis>


</title>




<para id="p1251">
The Java code for my SVG graphics library is provided in 

<link id="a1243" target-id="Listing_26">

Listing 26

</link>

. All you need 
to do is copy this code into a file named 

<emphasis id="strong1124" effect="bold">
SvgLib21.java

</emphasis>
 and place that file in 
the same folder with your program code. I will explain later what you need to do 
after that.

</para>


	



<note id="note1000" type="">





The graphics library in Listing 26 was updated on 08/11/11 to add new features. 
However, the text in this module has not been updated to illustrate the use of 
those new features. The downloadable documentation has been updated to include 
those features.

</note>




	


<para id="p1252">
<emphasis id="strong1125" effect="bold">
IVEO compatibility

</emphasis>
</para>




<para id="p1253">
Note that the library was revised on 08/07/11 to add a 

<emphasis id="strong1126" effect="bold">
title

</emphasis>
 element to each shape
element and to the 

<emphasis id="strong1127" effect="bold">
svg

</emphasis>
 element. As a result, when the output SVG file is
opened in the 

<link id="a1244" url="http://www.viewplus.com/solutions/touch-audio-learning/">

IVEO 
viewer

</link>

 and you click on a shape, information about that shape is spoken by IVEO. When you open the file in the 

<link id="a1245" url="http://www.viewplus.com/solutions/touch-audio-learning/">

IVEO 
viewer

</link>

, the text content of the 

<emphasis id="strong1128" effect="bold">
title

</emphasis>
 element belonging to 
the 

<emphasis id="strong1129" effect="bold">
svg

</emphasis>
 element is spoken.

</para>




<para id="p1254">
Note that you 
must be careful about the order in which you add the
shapes to the drawing. For example, a rectangle that
is added after a line is added can cover the line
and prevent the information about the line from being
spoken by IVEO even though the rectangle may be transparent. 
Therefore, for IVEO compatibility, you must not allow
one shape object to cover another shape object.

</para>




<para id="p1255">
<emphasis id="strong1130" effect="bold">
Graphics library documentation

</emphasis>
</para>




<para id="p1256">
Click 

<link id="a1246" url="SvgLib21Docs.zip">

here

</link>

 to download a zip file named


<emphasis id="strong1131" effect="bold">
SvgLib21Docs.zip

</emphasis>
 containing standard Java documentation for the 
graphics library.

</para>




<para id="p1257">
To view the documentation, YOU MUST EXTRACT the contents of the zip file into 
an empty folder. 

<emphasis id="em1111" effect="italics">
(Forgive me for shouting, but my students are constantly 
forgetting to extract material from a zip file before they try to use that 
material.)

</emphasis>
 Then open the file named 

<emphasis id="strong1132" effect="bold">
index.html

</emphasis>
 in your 
browser. If you are unfamiliar with the format of the documentation, the 
explanation at 

<link id="a1247" url="http://www.apl.jhu.edu/~hall/java/beginner/api.html">


http://www.apl.jhu.edu/~hall/java/beginner/api.html

</link>

 might be helpful.

</para>




</section>
<section id="h21011">
<title>
<emphasis id="Another_sample_program" effect="bold">

Another sample program

</emphasis>


</title>




<para id="p1258">
Another sample program that produces a different drawing is provided in 


<link id="a1248" target-id="Listing_27">

Listing 27

</link>

. This program contains extensive usage instructions in the form of 
comments for all of the capabilities of my SVG graphics library. If you 
encounter any difficulties using the library, you should consult the 
instructions in that program.

</para>




</section>
</section>
<section id="h11003">
<title>
<emphasis id="Creating_compiling_and_running_Java_programs" effect="bold">


Writing, compiling, and running Java programs

</emphasis>


</title>




<section id="h21012">
<title>
<emphasis id="Writing_the_code" effect="bold">

Writing Java code

</emphasis>


</title>




<para id="p1259">
Fortunately, writing Java code is straightforward. You can write Java code 
using any plain text editor. You simply need to cause the output file to have 
an extension of .java.

</para>




<para id="p1260">
There are a number of high-level Integrated Development Environments 

<emphasis id="em1112" effect="italics">
(IDEs)

</emphasis>
 
available, such as Eclipse and NetBeans, but they tend to be overkill for the relatively simple Java programs 
described in this module.

</para>




<para id="p1261">
There are also some low-level IDEs available, such as JCreator and DrJava, 
which are very useful for sighted students. However, I don't know anything about 
their level of accessibility. I normally use a free version of JCreator, mainly 
because it contains a color-coded editor, but that feature wouldn't be useful 
for a blind student.

</para>




<para id="p1262">
So, just find an editor that you are happy with and use it to write your Java 
code.

</para>




</section>
<section id="h21013">
<title>
<emphasis id="Preparing_to_compile_and_run_Java_code" effect="bold">

Preparing to compile and 
run Java code

</emphasis>


</title>




<para id="p1263">
Perhaps the most complicated thing is to get your computer set up for 
compiling and running Java code in the first place.

</para>




<section id="h31017">
<title>
<emphasis id="The_java_development_kit" effect="bold">

The java development kit 

<emphasis id="em1113" effect="italics">
(JDK)

</emphasis>
</emphasis>


</title>




<para id="p1264">
You will need to download and install the free Java JDK from


<link id="a1249" url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">


http://www.oracle.com/technetwork/java/javase/downloads/index.html

</link>


</para>




<para id="p1265">
I notice that Java SE 7 has been released very recently. However, my SVG 
graphics library was tested using Java SE 6 Update 26, and that is what I would 
recommend. Also there is a 64-bit version, but my library has not been tested 
with the 64-bit version. If your operating system will accommodate it, I 
recommend that you stick with the 32 bit version just in case the 64-bit version 
is not compatible with my library.

</para>




<para id="p1266">
You will find installation instructions on the download page shown above.

</para>




</section>
<section id="h31018">
<title>
<emphasis id="JDOM_version" effect="bold">

JDOM version 1.1.1

</emphasis>


</title>




<para id="p1267">
You will also need to download and install a class library named JDOM 1.1.1 
at 

<link id="a1250" url="http://www.jdom.org/">

http://www.jdom.org/

</link>

 

</para>




<para id="p1268">
When you do that download, you will receive a zip file that also contains 
some installation instructions. However, my experience is that those 
installation instructions are overkill, at least that is the case on a Windows 
machine.

</para>




<para id="p1269">
All you need to do is to extract the file named 

<emphasis id="strong1133" effect="bold">
jdom.jar

</emphasis>
 from the zip file 


<emphasis id="em1114" effect="italics">
(look for it in the build directory in the zip file)

</emphasis>
, store it somewhere on your 
disk, and put it on the classpath at compile time and runtime. 

<emphasis id="em1115" effect="italics">
(I will explain 
the bit about the classpath a little later.)

</emphasis>
</para>




<para id="p1270">
In my case, I'm running Windows Vista Premium Home Edition and I elected to 
store the 

<emphasis id="strong1134" effect="bold">
jdom.jar

</emphasis>
 file in the 

<emphasis id="following_folder" effect="bold">

following folder

</emphasis>

:

</para>




<para id="p1271">
C:\Program Files (x86)\Java\jdom-1.1.1\build\jdom.jar

</para>




<para id="p1272">
It doesn't really matter where you store it as long as you know how to 
specify that location in the classpath later.

</para>




</section>
</section>
<section id="h21014">
<title>
<emphasis id="Compiling_and_running_Java_code" effect="bold">

Compiling and running Java code

</emphasis>


</title>




<para id="p1273">
There are a variety of ways to compile and run Java code. The way that I will 
describe here is the most basic and, in my opinion, the most reliable. These instructions 
apply to a Windows operating system. If you are using a different operating 
system, you will need to translate the instructions to your operating system.

</para>




<para id="p1274">
<emphasis id="strong1135" effect="bold">
Write your Java program

</emphasis>
</para>




<para id="p1275">
Begin by writing your Java program into a text file with an extension of 
.java. Save it in a folder somewhere on your disk. Make sure that you adhere to 
the earlier instructions regarding the name of the class and the name of the 
file, and remember that everything is case sensitive.

</para>




<para id="p1276">
Create a file named 

<emphasis id="strong1136" effect="bold">
SvgLib21.java

</emphasis>
 that contains an exact replica of the Java 
code in 

<link id="a1251" target-id="Listing_26">

Listing 26

</link>

. Store that file in the same folder as your Java program.

</para>




<para id="p1277">
Create a batch file 

<emphasis id="em1116" effect="italics">
(or whatever the equivalent is for your operating system)

</emphasis>
 
containing the text shown in 

<link id="a1252" target-id="Listing_24">

Listing 24

</link>

.

</para>




<para id="p1278">
Then execute the batch file.

</para>





<para id="p1279">
If everything is successful, a Firefox window should open showing your 
drawing ready to be printed.

</para>





<table id="table1025" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1025">
<row id="tr1050">
<entry id="th1025">



<emphasis id="Listing_24" effect="bold">

Listing 24

</emphasis>

. Windows batch file.


</entry>
</row>
</thead>




<tbody id="tbody1025">
<row id="tr1051">
<entry id="td1025">



<code id="pre1023" display="block">
cls

del *.class
del Svg21a.svg
javac -cp ".;C:\Program Files (x86)\Java\jdom-1.1.1\build\jdom.jar" SvgLib21.java
javac -cp ".;C:\Program Files (x86)\Java\jdom-1.1.1\build\jdom.jar" Svg21a.java
java -cp ".;C:\Program Files (x86)\Java\jdom-1.1.1\build\jdom.jar"  Svg21a
start Firefox.exe Svg21a.svg
pause
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1280">
<emphasis id="strong1137" effect="bold">
Comments regarding the batch file

</emphasis>
</para>





<para id="p1281">
Note that the text inside the quotation marks is the same as the location 
where I 

<link id="a1253" target-id="following_folder">

stored the file

</link>

 named 

<emphasis id="strong1138" effect="bold">
jdom.jar

</emphasis>
. In fact, 
it is identical except that ".;" appears before that location in 


<link id="a1254" target-id="Listing_24">

Listing 24

</link>

. You need to cause your batch file to identify the location of the 
file named 

<emphasis id="strong1139" effect="bold">
jdom.jar

</emphasis>
 on your system just like I did in 

<link id="a1255" target-id="Listing_24">

Listing 24

</link>

.

</para>




<para id="p1282">
Do not modify the text that reads 

<emphasis id="strong1140" effect="bold">
"SvgLib21.java"

</emphasis>
 in 

<link id="a1256" target-id="Listing_24">

Listing 24

</link>

.

</para>




<para id="p1283">
Replace the text that reads 

<emphasis id="strong1141" effect="bold">
"Svg21a"

</emphasis>
 in all three locations in 

<link id="a1257" target-id="Listing_24">

Listing 24

</link>

 
with the name of your program. Note, however, that the first time it appears, it 
is specifying the name of the output SVG file. In case you elected to give your 
output SVG file a different name than the name of your program, you need to 
insert that name in place of 

<emphasis id="strong1142" effect="bold">
Svg21a.svg

</emphasis>
.

</para>




<para id="p1284">
<emphasis id="strong1143" effect="bold">
Starting the browser automatically

</emphasis>
</para>




<para id="p1285">
<link id="a1258" target-id="Listing_24">

Listing 24

</link>

 also assumes that you have Firefox 5 or later installed on your 
system and starts it running automatically

<emphasis id="em1117" effect="italics">
. (It will probably also work with 
earlier versions of Firefox. However, I 
have been unable to cause either Google Chrome or IE 9 to start automatically 
using this approach.)

</emphasis>
</para>




<para id="p1286">
In any event, the last line of text before the pause can be deleted from 


<link id="a1259" target-id="Listing_24">

Listing 24

</link>

 with no harmful effects. It simply won't 
start the browser 
automatically if you delete that text. In that case, you will have to manually open the output SVG file in the 
browser 

<emphasis id="em1118" effect="italics">
(or in some other SVG processor program)

</emphasis>
 in order to print it.


<emphasis id="em1119" effect="italics">
(Opening the SVG file manually seems to work in Firefox 5, IE 9, and Google 
Chrome 12.)

</emphasis>
</para>




<para id="p1287">
<emphasis id="strong1144" effect="bold">
Don't delete the pause command

</emphasis>
</para>




<para id="p1288">
The 

<emphasis id="strong1145" effect="bold">
pause

</emphasis>
 command causes the command-line window to stay on the 
screen. You will need to examine the contents of the window if there are errors 
when you attempt to compile and run your program, so don't delete the pause 
command.

</para>




<para id="p1289">
<emphasis id="strong1146" effect="bold">
Translate to other operating systems

</emphasis>
</para>




<para id="p1290">
Remember, the format of the batch file in 

<link id="a1260" target-id="Listing_24">

Listing 24

</link>

 is a Windows format. If 
you are using a different operating system, you will need to translate the 
information in 

<link id="a1261" target-id="Listing_24">

Listing 24

</link>

 into the correct format for your operating system.

</para>




</section>
</section>
<section id="h11004">
<title>
<emphasis id="Resources" effect="bold">

Resources

</emphasis>


</title>




<para id="p1291">
I will publish a module containing consolidated links to resources on my 
Connexions web page and will update and add to the list as additional modules 
in this collection are published. 

</para>




</section>
<section id="h11005">
<title>
<emphasis id="Complete_program_listings" effect="bold">

Complete program listings

</emphasis>


</title>




<para id="p1292">
Complete listings of the three programs discussed in this module are provided 
in 

<link id="a1262" target-id="Listing_25">

Listing 25

</link>

, 

<link id="a1263" target-id="Listing_26">

Listing 26

</link>

, and 


<link id="a1264" target-id="Listing_27">

Listing 27

</link>

.

</para>





<table id="table1026" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1026">
<row id="tr1052">
<entry id="th1026">



<emphasis id="Listing_25" effect="bold">

Listing 25

</emphasis>

. The program named Svg21a.java.


</entry>
</row>
</thead>




<tbody id="tbody1026">
<row id="tr1053">
<entry id="td1026">



<code id="pre1024" display="block">
/*File Svg21a.java,
Copyright 2011, R.G.Baldwin

Revised 08/07/11 to support the addition of a title 
parameter to each element for IVEO compatibility. If the
output SVG file is opened in IVEO, the title for the svg
element is spoken when the user opens the file, and the
titles for the individual elements are spoken when the
user touches a corresponding shape on the touchpad or
clicks on that shape on the screen. If the SVG file won't
be used with IVEO, just leave the title strings unchanged.

This program requires access to the file 
named SvgLib21.java

This is a demonstration program.

This program uses JDOM 1.1.1 and an SVG graphics library 
class of my own design named SvgLib21 to draw an 
abbreviated version of the mass-pulley system shown in Figure 4 
of the module that you will find at 
http://cnx.org/contents/16d1b592-5126-458f-883e-3ae872cc18c0.

Only one line of text is drawn by this program. Otherwise,
the drawing produced by this program is the same as
the drawing in the file named Phy1150a1.svg used in
that module titled Force and Motion -- Units of Force. The
original drawing was produced by a sighted person using
Inkscape. This drawing was produced by a sighted person
using Baldwin's svg drawing library.

Tested using J2SE 6, JDOM 1.1.1, and Firefox 5
running under Windows Vist Home Premium Edition.
*********************************************************/
import java.io.*;
import org.jdom.*;

public class Svg21a{
  public static void main(String[] args){

    //DO NOT MODIFY ANY OF THE CODE ABOVE THIS LINE.
    //##################################################//
    //ONLY THE CODE BELOW THIS LINE CAN BE MODIFIED
    
    //CREATE A DRAWING CANVAS
    //This must be the first statement that you write in
    // the program and it must appear only once.
    //The following statement creates a canvas that is
    // 8.5x11 inches in size in a landscape layout.
    Element svg = SvgLib21.makeSvg(ns,
                                   "Document Title",
                                   11,//width
                                   8.5  //height
                                   );
                                          

    //DO NOT MODIFY THE FOLLOWING STATEMENT
    //This statement must immediately follow the call to
    // the makeSvg method above and this statement MUST
    // NOT BE MODIFIED.
    Document doc = new Document(svg,docType);

    //Draw a rectangular border on the canvas.
    Element border = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      0.015,
                                      0.015,
                                      10.97,
                                      8.47
                                      );
    
    //Draw the floor.
    Element floor = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      0.5,
                                      0.5,
                                      10.5,
                                      0.5
                                      );

    //Draw the wall.
    Element wall = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      1.0,
                                      0.5,
                                      1.0,
                                      7.5
                                      );

    //Draw the table top.
    Element tableTop = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      1.0,
                                      3.0,
                                      7.0,
                                      1.0
                                      );


    //Draw the table leg.
    Element tableLeg = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      6.5,
                                      0.5,
                                      0.5,
                                      2.5
                                      );
    
    
    //Draw Mass C
    Element massC = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      2.0,
                                      4.0,
                                      2.0,
                                      2.0
                                      );  
    
    
    //Draw Mass B
    Element massB = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      5.0,
                                      4.0,
                                      2.0,
                                      2.0
                                      );


    //Draw Mass A
    Element massA = SvgLib21.makePolygon(svg,
                                         ns,
                                         "polygon",
                                         new double[]{
                                           7.5,1.0,
                                           9.5,1.0,
                                           8.5,2.5
                                         });

    //Draw pully support
    Element pullySupport = SvgLib21.makeRect(svg,
                                             ns,
                                             "rectangle",
                                             7.883,
                                             3.595,
                                             0.392,
                                             1.06
                                             );

    //Draw the pulley wheel.
    Element pulleyWheel = SvgLib21.makeCircle(svg,
                                              ns,
                                              "circle",
                                              8.05,
                                              4.56,
                                              0.45
                                              );

    //Draw cord from wall to Mass C
    Element cordR = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      1.0,
                                      5.0,
                                      2,
                                      5.0
                                      );


    //Draw cord from Mass C to Mass B
    Element cordQ = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      4.0,
                                      5.0,
                                      5.0,
                                      5.0
                                      );


    //Draw cord from Mass B to the top of the pulley.
    Element cordP1 = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      7.0,
                                      5.0,
                                      8.05,
                                      5.0
                                      );


    //Draw the cord from the right side of the pulley to
    // Mass A
    Element cordP2 = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      8.5,
                                      4.5,
                                      8.5,
                                      2.5
                                      );
                                      
    //Set the line thicknesses for various objects.
    SvgLib21.setStrokeWidth(border,0.03);
    SvgLib21.setStrokeWidth(floor,0.1);
    SvgLib21.setStrokeWidth(wall,0.1);
    SvgLib21.setStrokeWidth(tableTop,0.03);
    SvgLib21.setStrokeWidth(tableLeg,0.03);
    SvgLib21.setStrokeWidth(massC,0.05); 
    SvgLib21.setStrokeWidth(massB,0.05);
    SvgLib21.setStrokeWidth(massA,0.05);
    SvgLib21.setStrokeWidth(pullySupport,0.05);
    SvgLib21.setStrokeWidth(pulleyWheel,0.05);
    SvgLib21.setStrokeWidth(cordR,0.03);
    SvgLib21.setStrokeWidth(cordQ,0.03);
    SvgLib21.setStrokeWidth(cordP1,0.03);
    SvgLib21.setStrokeWidth(cordP2,0.03);

    //Draw text
    Element textA = SvgLib21.makeText(
                                    svg,
                                    ns,
                                    2.5,
                                    3.3,
                                    "arial",
                                    32,
                                    "Friction free table."
                                    );

    //WRITE OUTPUT FILE
    //Don't include extension in output file name.
    SvgLib21.writePrettyFile("Svg21a",doc);
    
    //ONLY THE CODE ABOVE THIS LINE CAN BE MODIFIED
    //##################################################//
    //DO NOT MODIFY ANY OF THE FOLLOWING CODE.    
  }//end main
  //----------------------------------------------------//

  //Create a String variable containing the namespace
  // URI to reduce the amount of typing that is required
  // later. Note that the variable name is short and
  // easy to type.
  static String ns = "http://www.w3.org/2000/svg";
  
  //For clarity, create strings containing the name of
  // the element that is constrained by the DTD (the
  // root element), the Public ID of the DTD, and the
  // System ID of the DTD.
  static String dtdConstrainedElement = "svg";
  static String dtdPublicID = "-//W3C//DTD SVG 1.1//EN";
  static String dtdSystemID = 
     "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd";
     
  
  static DocType docType = new DocType(
         dtdConstrainedElement,dtdPublicID,dtdSystemID);

}//end class Svg21a
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1293">
Note that the strange comments in 

<link id="a1265" target-id="Listing_26">

Listing 26

</link>

 were 
placed there so that the program named 

<emphasis id="strong1147" effect="bold">
javadoc

</emphasis>
 could be used to 
produce 

<link id="a1266" url="SvgLib21Docs.zip">

standard Java documentation

</link>

 for the 
graphic library.

</para>






<table id="table1027" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1027">
<row id="tr1054">
<entry id="th1027">



<emphasis id="Listing_26" effect="bold">

Listing 26

</emphasis>

. The program named SvgLib21.java.


</entry>
</row>
</thead>




<tbody id="tbody1027">
<row id="tr1055">
<entry id="td1027">



<code id="pre1025" display="block">
import java.io.*;
import org.jdom.*;
import org.jdom.output.XMLOutputter;
import org.jdom.output.Format;

/**
File SvgLib21.java
&lt;p&gt;
Copyright 2011, R.G.Baldwin
&lt;p&gt;
Revised 08/11/11 to add a method named setDescription
that can be called to add a &lt;desc&gt; element to any other
element. The description can be spoken in IVEO by first
selecting the element an pressing Ctrl+d.
&lt;p&gt;
Revised 08/07/11 to add a parameter for the title to
allow the user to pass in a string for the title element.
&lt;p&gt;
Revised 08/06/11 to add a title element to each shape
element. As a result, when the SVG file is
opened in IVEO and you click on the shape, the name of
the shape is spoken by IVEO. Note, however, that you 
must be careful about the order in which you add the
shapes to the drawing. For example, a rectangle that
is added after a line is added can cover the line
and prevent the information about the line from being
spoken even though the rectangle may be transparent. 
Therefore, for IVEO compatibility, you must not allow
one shape object to cover another shape object.
&lt;p&gt;
DESCRIPTION
&lt;p&gt;
This is a graphics library that is designed to eliminate
much of the pain involved in writing JDOM code to
create SVG output. The library contains individual
static methods that are used to construct and return
all of the SVG basic shape elements, text elements,
description elements and comment elements.
&lt;p&gt;
In addition there are methods to set various attributes
on shape elements and text elements.

This library provides methods to instantiate, return,
and manipulate the following types of SVG elements:
&lt;ul&gt;
&lt;li&gt;line&lt;/li&gt;
&lt;li&gt;rect&lt;/li&gt;
&lt;li&gt;circle&lt;/li&gt;
&lt;li&gt;ellipse&lt;/li&gt;
&lt;li&gt;polyline&lt;/li&gt;
&lt;li&gt;polygon&lt;/li&gt;
&lt;li&gt;desc&lt;/li&gt;
&lt;li&gt;comment&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Methods that return elements set the stroke attribute
value to black and set the stroke-width attribute 
value to 1.
&lt;p&gt;
All of the methods that accept coordinate values or
dimensions as input require those values to be in
inches or fractions thereof. They are then converted 
to svg units using a scale factor of 90 svg units 
per inch.
&lt;p&gt;
All incoming vertical coordinate values are modified
to cause the origin to be at the lower-left corner. 
Positive x is to the right and positive y is up the 
page. Therefore, the user can think in terms of a
typical graphing assignment with the origin at the 
lower-left corner.
&lt;p&gt;
One svg unit equals approximately 0.011 inch. An svg 
unit is not necessarily the same size as a pixel on a
monitor or a printer. However, dimensions specified in 
inches should be very close when you print the image.
&lt;p&gt;
In addition to the methods mentioned above, this library
provides two different methods for writing the final
SVG/XML out to a file. One is named writePrettyFile and
the other is named writeCompactFile.
&lt;p&gt;
Tested using J2SE 6.0, JDOM 1.1.1, Firefox 5, running 
under Windows Vista Home Premius Edition.
&lt;p&gt;
author: Richard G. Baldwin
*/
public class SvgLib21{
  
/*The following instance variable is used to cause the
origin to be at the bottom left corner of the 
drawing.
*/
  private static double svgHeight = 11.0;
  
  //----------------------------------------------------//
  
  /**This method constructs and returns a circle node for
   *a given parent in a given namespace.  By default,the
   *stroke is black, the stroke-width is 1, and the fill
   *is none. Other methods can be called to change these
   *default values later.
   *
   * @param parent the SVG parent element
   * @param namespace the SVG namespace
   * @param elementTitle the title for IVEO compatibility
   * @param cx the x-coordinate of the center in inches
   * @param cy the y-coordinate of the center in inches
   * @param r the radius of the circle in inches
   *
   * @return A reference to an object that represents an
   *SVG circle element
   */
  public static Element makeCircle(
                  Element parent,
                  String namespace,
                  String elementTitle,
                  double cx,//Center coordinate in inches
                  double cy,//Center coordinate in inches
                  double r  //Radius in inches
                  ){
    Element circle = new Element("circle",namespace);
    parent.addContent(circle);
    
    //Set default attribute vales
    circle.setAttribute("fill","none");
    circle.setAttribute("stroke","black");
    circle.setAttribute("stroke-width","1");
    
    //Set user specified attribute values.
    int cxInPix = (int)(Math.round(cx*90));
    int cyInPix = 
               (int)(Math.round((svgHeight-cy)*90));
    int rInPix = (int)(Math.round(r*90));

    circle.setAttribute("cx",""+cxInPix);
    circle.setAttribute("cy",""+cyInPix);
    circle.setAttribute("r",""+rInPix);
    
    //Add a title element for IVEO compatibility
    Element title = new Element("title",namespace);
    title.addContent(elementTitle);
    circle.addContent(title);
    
    return circle;
  }//end makeCircle
  //----------------------------------------------------//
  
  /**This method constructs and returns a comment node
   *for a given given parent.
   *
   * @param parent the SVG parent element
   * @param text the text content for this comment element
   *
   *@return A reference to an object that represents an
   *SVG comment element.
  */
  public static Comment makeComment(
              Element parent,//The parent of this element.
              String text//Text content for this element.
              ){
    Comment comment = new Comment(text);
    parent.addContent(comment);

    return comment;
  }//end makeComment
  //----------------------------------------------------//
  
  /**
   *DEPRECATED This method has been deprecated Use the
   *method named setDescription instead.
   *
   *This method constructs and returns a description node
   *for a given namespace and a given parent.
   *
   * @param parent the SVG parent element
   * @param nameSpace the SVG namespace
   * @param text the text content for this desc element
   *
   *@return A reference to an object that represents an
   *SVG desc element.
   */
  public static Element makeDescription(
              Element parent,//The parent of this element.
              String nameSpace,//The namespace.
              String text//Text content for this element.
              ){
    Element desc = new Element("desc",nameSpace);
    parent.addContent(desc);
    desc.setText(text);

    return desc;
  }//end makeDescription
  //----------------------------------------------------//

  /**This method constructs and returns an ellipse node
   *for a given parent in a given namespace. By default,
   *the stroke is black, the stroke-width is 1, and the
   *fill is none.
   *
   * @param parent the SVG parent element
   * @param namespace the SVG namespace
   * @param elementTitle the title for IVEO compatibility
   * @param cx the x-coordinate of the center in inches
   * @param cy the y-coordinate of the center in inches
   * @param rx the horizontal radius of the ellipse
   * in inches
   * @param ry the vertical radius of the ellipse
   * in inches
   *
   * @return A reference to an object that represents an
   *SVG ellipse element
   */
  public static Element makeEllipse(
                  Element parent,
                  String namespace,
                  String elementTitle,
                  double cx,//Center coordinate in inches
                  double cy,//Center coordinate in inches
                  double rx,//Horizontal radius in inches
                  double ry //Vertical radius in inches
                  ){
    Element ellipse = new Element("ellipse",namespace);
    parent.addContent(ellipse);
    
    //Set default attribute vales
    ellipse.setAttribute("fill","none");
    ellipse.setAttribute("stroke","black");
    ellipse.setAttribute("stroke-width","1");
    
    //Set user specified attribute values.
    int cxInPix = (int)(Math.round(cx*90));
    int cyInPix = 
                (int)(Math.round((svgHeight-cy)*90));
    int rxInPix = (int)(Math.round(rx*90));
    int ryInPix = (int)(Math.round(ry*90));

    ellipse.setAttribute("cx",""+cxInPix);
    ellipse.setAttribute("cy",""+cyInPix);
    ellipse.setAttribute("rx",""+rxInPix);
    ellipse.setAttribute("ry",""+ryInPix);
    
    //Add a title element for IVEO compatibility
    Element title = new Element("title",namespace);
    title.addContent(elementTitle);
    ellipse.addContent(title);
    
    return ellipse;
  }//end makeEllipse
  //----------------------------------------------------//
  
  /**This method constructs and returns a line node for a
   *given parent in a given namespace.  By default, the
   *stroke is black and the stroke-width is 1.
   *
   * @param parent the SVG parent element
   * @param namespace the SVG namespace
   * @param elementTitle the title for IVEO compatibility
   * @param x1 start x-coordinate in inches
   * @param y1 start y-coordinate in inches
   * @param x2 end x-coordinate in inches
   * @param y2 end y-coordinate in inches
   *
   * @return A reference to an object that represents an
   *SVG line element
   */
  public static Element makeLine(
                  Element parent,
                  String namespace,
                  String elementTitle,
                  double x1,//Start coordinate in inches
                  double y1,//Start coordinate in inches
                  double x2,//End coordinate in inches
                  double y2 //End coordinate in inches
                                ){
    Element line = new Element("line",namespace);
    parent.addContent(line);
    
    //Set default attribute vales
    line.setAttribute("stroke","black");
    line.setAttribute("stroke-width","1");
    
    //Set user specified attribute values.
    int x1InPix = (int)(Math.round(x1*90));
    int y1InPix = 
                (int)(Math.round((svgHeight-y1)*90));
    int x2InPix = (int)(Math.round(x2*90));
    int y2InPix = 
                (int)(Math.round((svgHeight-y2)*90));

    line.setAttribute("x1",""+x1InPix);
    line.setAttribute("y1",""+y1InPix);
    line.setAttribute("x2",""+x2InPix);
    line.setAttribute("y2",""+y2InPix);
    
    //Add a title element for IVEO compatibility
    Element title = new Element("title",namespace);
    title.addContent(elementTitle);
    line.addContent(title);
    
    return line;
  }//end makeLine
  //----------------------------------------------------//
  
  /**This method constructs and returns a polygon node for
   *a given parent in a given namespace.
   *&lt;p&gt;
   *The array of type double[], which contains the
   *coordinates for each point in the polygon, must
   *contain an even number of values for the polygon
   *to be drawn correctly. Otherwise, it simply won't be
   *drawn.
   *&lt;p&gt;
   *The values are extracted from the array, converted
   *to svg units as type int, and treated as coordinate
   *values x1,y1, x2,y2, x3,y3 ... etc.
   *&lt;p&gt;
   *The stroke is set to black one pixel wide with no
   *fill.
   *&lt;p&gt;
   *The main difference between a polygon and a polyline
   *is that a polygon is automatically closed by 
   *connecting the last point to the first point.
   *
   * @param parent the SVG parent element
   * @param namespace the SVG namespace
   * @param elementTitle the title for IVEO compatibility
   * @param points an array of x-y coordinate pairs in
   * inches that define the locations of the vertices of
   * the polygon.
   *
   * @return A reference to an object that represents an
   *SVG polygon element
   */
  public static Element makePolygon(Element parent,
                             String namespace,
                             String elementTitle,
                             double[] points){
    Element polygon = new Element("polygon",namespace);
    parent.addContent(polygon);
    
    //Set default attributes.
    polygon.setAttribute("stroke","black");
    polygon.setAttribute("stroke-width","1");
    polygon.setAttribute("fill","none");
    
    //Set user specified attributes.
    String dataPoints = "";
    for(int cnt=0;cnt&lt;points.length;cnt++){
      //Correct all of the y coordinates to place the
      // origin at the bottom left.
      if(cnt%2==0){
        //even values
        dataPoints += "" + 
             (int)(Math.round(points[cnt]*90)) + " ";
      }else{
        //odd values
        dataPoints += "" + 
             (int)(Math.round((svgHeight-points[cnt])
                                         *90)) + " ";
      }//end else
    }//end for loop
    
    polygon.setAttribute("points",dataPoints);
    
    //Add a title element for IVEO compatibility
    Element title = new Element("title",namespace);
    title.addContent(elementTitle);
    polygon.addContent(title);

    return polygon;
  }//end makePolygon
  //----------------------------------------------------//

  /**This method constructs and returns a polyline node
   *for a given parent in a given namespace.
   *&lt;p&gt;
   *The array of type double[], which contains the
   *coordinates for each point in the polyline, must
   *contain an even number of values for the polyline
   *to be drawn correctly. Otherwise, it simply won't be
   *drawn.
   *&lt;p&gt;
   *The values are extracted from the array, converted
   *to svg units as type int, and treated as coordinate
   *values x1,y1, x2,y2, x3,y3 ... etc.
   *&lt;p&gt;
   *The stroke is set to black one pixel wide with no
   *fill.
   *&lt;p&gt;
   *The main difference between a polyline and a polygon
   *is that a polygon is automatically closed by 
   *connecting the last point to the first point.
   *
   * @param parent the SVG parent element
   * @param namespace the SVG namespace
   * @param elementTitle the title for IVEO compatibility
   * @param points an array of x-y coordinate pairs in
   * inches that define the locations of the end points
   * and the vertices of the polyline.
   *
   * @return A reference to an object that represents an
   *SVG polyline element
   */
  public static Element makePolyline(Element parent,
                              String namespace,
                              String elementTitle,
                              double[] points){
    Element polyline = new Element("polyline",namespace);
    parent.addContent(polyline);

    //Set default attributes
    polyline.setAttribute("stroke","black");
    polyline.setAttribute("stroke-width","1");
    polyline.setAttribute("fill","none");
    
    //Set user specified attributes.
    String dataPoints = "";
    for(int cnt=0;cnt&lt;points.length;cnt++){
      //Correct all of the y coordinates to place the
      // origin at the bottom left.
      if(cnt%2==0){
        //even values
        dataPoints += "" + 
             (int)(Math.round(points[cnt]*90)) + " ";
      }else{
        //odd values
        dataPoints += "" + 
            (int)(Math.round((svgHeight-points[cnt])
                                         *90)) + " ";
      }//end else
    }//end for loop
    
    polyline.setAttribute("points",dataPoints);
    
    //Add a title element for IVEO compatibility
    Element title = new Element("title",namespace);
    title.addContent(elementTitle);
    polyline.addContent(title);
    
    return polyline;
  }//end makePolyline
  //----------------------------------------------------//

  /**This method constructs and returns a rect node for a
   *given parent in a given namespace.  By default,the
   *stroke is black, the stroke-width is 1, and the fill
   *is none.
   *
   * @param parent the SVG parent element
   * @param namespace the SVG namespace
   * @param elementTitle the title for IVEO compatibility
   * @param x x-coordinate of lower left corner in inches
   * @param y y-coordinate of lower left corner in inches
   * @param width width in inches
   * @param height height in inches
   *
   * @return A reference to an object that represents an
   *SVG rect element
   */
  public static Element makeRect(
                  Element parent,
                  String namespace,
                  String elementTitle,
                  double x,//Lower-left corner in inches.
                  double y,//Lower-left corner in inches.
                  double width,//in inches
                  double height//in inches
                  ){
    Element rect = new Element("rect",namespace);
    parent.addContent(rect);
    
    //Set default attribute values.
    rect.setAttribute("fill","none");
    rect.setAttribute("stroke","black");
    rect.setAttribute("stroke-width","1");
    
    //Set user specified attribute values.
    int xInPix = (int)(Math.round(x*90));
    int yInPix = 
          (int)(Math.round((svgHeight-y-height)*90));
    int widthInPix = (int)(Math.round(width*90));
    int heightInPix = (int)(Math.round(height*90));

    rect.setAttribute("x",""+xInPix);
    rect.setAttribute("y",""+yInPix);
    rect.setAttribute("width",""+widthInPix);
    rect.setAttribute("height",""+heightInPix);
    
    //Add a title element for IVEO compatibility
    Element title = new Element("title",namespace);
    title.addContent(elementTitle);
    rect.addContent(title);
    
    return rect;
  }//end makeRect
  //----------------------------------------------------//
 
  /**This method constructs and returns a reference to an
   *SVG root element node named svg.
   *
   *The svg element represents the canvas on which
   *various shapes can be drawn. The width and height
   *attribute values of the svg element establish the
   *physical size of the canvas on the screen and on
   *the printer.
   *
   *The preserveAspectRatio defaults to none.
   *
   * @param ns the SVG namespace URI
   * @param documentTitle the title for IVEO compatibility
   * @param dWidth the width of the canvas in inches
   * @param dHeight the height of the canvas in inches
   *
   * @return A reference to an SVG element object
   */
  public static Element makeSvg(
                      String ns,//namespace URI
                      String documentTitle,
                      double dWidth,
                      double dHeight
                      ){
    Element svg = new Element("svg",ns);
    
    //Save the height of the canvas. This is used later
    // to make corrections to y-coordinate values to put
    // the origin at the lower-left corner of the canvas.
    svgHeight = dHeight;
    
    int width = (int)(Math.round(dWidth*90));
    int height = (int)(Math.round(dHeight*90));
    
    //Set default attribute values.
    svg.setAttribute("version","1.1");
    svg.setAttribute("width",""+width);
    svg.setAttribute("height",""+height);
    
    //Add a title element for IVEO compatibility
    Element title = new Element("title",ns);
    title.addContent(documentTitle);
    svg.addContent(title);
    
    return svg;
  }//end makeSvg
  //----------------------------------------------------//

  /**This method constructs and returns a text node for a
   *given parent in a given namespace.  By default,the
   *stroke is black, and the fill is none.
   *
   * @param parent the SVG parent element
   * @param namespace the SVG namespace
   * @param x x-coordinate of lower left corner of first
   * character in inches
   * @param y y-coordinate of lower left corner of first
   * character in inches
   * @param fontFamily font family such as arial
   * @param fontSize font size in points such as 32
   * @param textIn the text to be displayed
   *
   * @return A reference to an object that represents an
   *SVG text element
   */
  public static Element makeText(
              Element parent,
              String namespace,
              double x,//Beginning coordinate in inches
              double y,//Beginning coordinate in inches
              String fontFamily,  //Font face
              int fontSize, //font size in points
              String textIn //text to be displayed
              ){
    Element text = new Element("text",namespace);
    parent.addContent(text);
    
    //Set default attribute values
    text.setAttribute("fill","black");
    text.setAttribute("stroke","black");
    
    //Set user specified attribute values.
    int xInPix = (int)(Math.round(x*90));
    int yInPix = (int)(Math.round((svgHeight-y)*90));
    
    text.setAttribute("x",""+xInPix);
    text.setAttribute("y",""+yInPix);
    text.addContent(textIn);
    text.setAttribute("font-size","" +fontSize);
    text.setAttribute("font-family",fontFamily);
    
    return text;
  }//end makeText
  //----------------------------------------------------//

  /**This method can be used to set the fill color for
   *closed shapes such as rectangles, circles, ellipses,
   *and polygons. It can also be applied to polylines,
   *but the results may not be what you expect.
   *&lt;p&gt;
   *The fill color can be set to "none" or to any of the
   *color names at
   *&lt;p&gt;
&lt;a href="http://www.w3.org/TR/SVG/types.html#ColorKeywords"&gt;
http://www.w3.org/TR/SVG/types.html#ColorKeywords&lt;/a&gt;
   *&lt;p&gt;
   *There may be other possibilities as well.
   *
   *@param element the element for which the fill will be
   *set
   *@param fillColor the new color for the fill
   */
  public static void setFill(Element element,
                             String fillColor){
    element.setAttribute("fill",fillColor);
  }//end setFill
  //----------------------------------------------------//
  
  /**This method can be used to set the fill opacity for
   *all closed shapes such as rectangles, circles,
   *ellipses, and polygons.
   *&lt;p&gt;
   *The fill opacity can be set to any value between 
   *0,0 and 1.0 inclusive, where 0.0 is totally
   *transparent and 1.0 is totally opaque.
   *
   *@param element the element for which the opacity
   *will be set
   *@param opacity the numeric opacity value
   */
  public static void setFillOpacity(Element element,
                                    double opacity){
    element.setAttribute("fill-opacity","" + opacity);
  }//end setFillOpacity
  //----------------------------------------------------//

  /**This method can be used to set the font style
   *for text.
   *&lt;p&gt;
   *The font-style can be set to
   *&lt;p&gt;
   *normal | italic | oblique
   *
   *@param element the text element for which the font
   *style will be set
   *@param fontStyle the new font style
   */
  public static void setFontStyle(Element element,
                                  String fontStyle){
    element.setAttribute("font-style","" + fontStyle);
  }//end setFontStyle
  //----------------------------------------------------//

  /**This method can be used to set the font weight
   *for text.
   *&lt;p&gt;
   *The font-weight can be set to
   *&lt;p&gt;
   *normal | bold | bolder | lighter | 100 | 200 | 300| 
   *400 | 500 | 600 | 700 | 800 | 900 |
   *
   *@param element the text element for which the font
   *weight will be set
   *@param fontWeight the new font weight
   */
  public static void setFontWeight(Element element,
                                   String fontWeight){
    element.setAttribute("font-weight","" + fontWeight);
  }//end setFontWeight
  //----------------------------------------------------//

  /**This method can be used to set the stroke color for
   *all shapes.
   *&lt;p&gt;
   *The stroke color can be set to "none" or any of the
   *color names at 
   *&lt;p&gt;
&lt;a href="http://www.w3.org/TR/SVG/types.html#ColorKeywords"&gt;
http://www.w3.org/TR/SVG/types.html#ColorKeywords&lt;/a&gt;
   *&lt;p&gt;
   *There may be other possibilities as well.
   *
   *@param element the element for which the stroke color
   *will be set
   *@param strokeColor the new stroke color
   */
  public static void setStroke(Element element,
                               String strokeColor){
    element.setAttribute("stroke",strokeColor);
  }//end setStroke
  //----------------------------------------------------//

  /**This method can be used to set the stroke opacity
   *for all shapes.
   *&lt;p&gt;
   *The stroke opacity can be set to any value between
   *0,0 and 1.0 inclusive, where 0.0 is totally
   *transparent and 1.0 is totally opaque.
   *
   *@param element the element for which the stroke color
   *will be set
   *@param opacity the numeric opacity value
   */
  public static void setStrokeOpacity(Element element,
                                      double opacity){
    element.setAttribute("stroke-opacity","" + opacity);
  }//end setStrokeOpacity
  //----------------------------------------------------//
  
  /**This method can be used to set the stroke width 
   *for rectangles, circles, ellipses, lines, polylines,
   *and polygons.
   *
   *@param element the element for which the stroke color
   *will be set
   *@param widthInInches the new stroke width in inches
   *or parts thereof
   */
  public static void setStrokeWidth(Element element,
                                    double widthInInches){
    //Scale and round the double width value to an 
    // int value in svg units where there are 90 svg
    // units per inch.
    int widthInPix = 
                 (int)(Math.round(widthInInches*90));
    element.setAttribute("stroke-width","" + widthInPix);
  }//end setStrokeWidth
  //----------------------------------------------------//
  
  /**This method can be used to add a description &lt;desc&gt;
   *element to any other element
   *
   * @param parent the element to which the description
   *will be added
   * @param namespace the SVG namespace
   *@param description the text for the new description.
   */
  public static void setDescription(Element parent,
                                    String namespace,
                                    String description){
    Element desc = new Element("desc",namespace);
    parent.addContent(desc);
    desc.addContent(description);
  }//end setStrokeWidth
  //----------------------------------------------------//
  
  /**This method writes the SVG code into an output file
   *in whitespace-normalized format, which is more
   *efficient than the prettyPrint format.
   *@param fname path and name of output SVG file
   *including the .svg filename extension
   *@param doc a reference to an object of type Document
   *which was instantiated as
   *&lt;p&gt;
   *new Document(svg,docType)
   *&lt;p&gt;
   *where svg is the root element of the SVG document
   *&lt;p&gt;
   *and docType was instantiated as
   *&lt;p&gt;
   *DocType docType = new DocType( 
   * dtdConstrainedElement,dtdPublicID,dtdSystemID);
   */
  public static void writeCompactFile(
                              String fname, Document doc){
    try{
      FileOutputStream out = new FileOutputStream(fname);

      XMLOutputter xmlOut = 
              new XMLOutputter(Format.getCompactFormat());
      xmlOut.output(doc,out);

      out.flush();
      out.close();
    }catch (IOException e){
      System.err.println(e);
    }//end catch
  }//end writePrettyFile
  //----------------------------------------------------//

  /**This method writes the SVG code into an output file
   *in pretty-print format. The pretty-print format
   *is less efficient than the compact format, but it
   *is very useful during test and debugging because
   *you can view source in your browser and the XML
   *code will be reasonably well formatted.
   *&lt;p&gt;
   *Note that the extension is automatically appended to
   *the output file name, so it should not be included
   *in the file name input parameter.
   *
   *@param fname path and name of output SVG file
   *excluding the .svg filename extension
   *@param doc a reference to an object of type Document
   *which was instantiated as
   *&lt;p&gt;
   *new Document(svg,docType)
   *&lt;p&gt;
   *where svg is the root element of the SVG document
   *&lt;p&gt;
   *and docType was instantiated as
   *&lt;p&gt;
   *DocType docType = new DocType( 
   * dtdConstrainedElement,dtdPublicID,dtdSystemID);
   */
  public static void writePrettyFile(
                              String fname, Document doc){
    try{
      FileOutputStream out = 
                     new FileOutputStream(fname + ".svg");

      XMLOutputter xmlOut = 
               new XMLOutputter(Format.getPrettyFormat());
      xmlOut.output(doc,out);

      out.flush();
      out.close();
    }catch (IOException e){
      System.err.println(e);
    }//end catch
  }//end writePrettyFile
  //----------------------------------------------------//
  
}//end class SvgLib21

</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1294">
-----

</para>






<table id="table1028" summary="This is a table." pgwide="677">
<tgroup cols="1">




<thead id="thead1028">
<row id="tr1056">
<entry id="th1028">



<emphasis id="Listing_27" effect="bold">

Listing 27

</emphasis>

. The program named Svg21.java.


</entry>
</row>
</thead>




<tbody id="tbody1028">
<row id="tr1057">
<entry id="td1028">



<code id="pre1026" display="block">
/*File Svg21.java,
Copyright 2011, R.G.Baldwin

Revised 08/07/11 to support the addition of a title 
parameter to each element for IVEO compatibility. If the
output SVG file is opened in IVEO, the title for the svg
element is spoken when the user opens the file, and the
titles for the individual elements are spoken when the
user touches a corresponding shape on the touchpad or
clicks on that shape on the screen. If the SVG file won't
be used with IVEO, just leave the title strings unchanged.

This program requires access to the file 
named SvgLib21.java

This is a demonstration program.

This program uses JDOM 1.1.1 and an SVG graphics library 
class of my own design named SvgLib21 to create an XML 
file named Svg21.svg that draws at least one of each of 
the following six basic SVG shapes when rendered in an 
SVG graphics engine such as Firefox 5.

    * rectangle
    * circle
    * ellipse
    * line
    * polyline
    * polygon

In addition, the program illustrates the creation of the
following two types of elements in the output SVG file.

    * description
    * comment

The main purpose is to demonstrate how to create an SVG 
file using the JDOM SVG graphics library that can be
displayed using Firefox 5 or IE 9. The file can also
be opened in other programs such as InkScape and IVEO.

All coordinate values are in inches and fractions of
inches.

One svg unit equals approximately 0.011 inch. An svg
unit is not necessarily the same size as a pixel on your
monitor or your printer. However, dimensions specified
in inches should be very close when you print the image.

By default, all lines that define the geometric shapes 
are black and are one pixel wide. This can be changed
by calling appropriate methods to change attribute values.

By default, the fill attribute for all geometric shapes
is "none". This can be changed by calling appropriate 
methods to change attribute values.

This program creates a canvas that is 8.5x11 inch in 
a portrait orientation.

The origin is at the lower-left corner. Positive x is
to the right and positive y is up the page.

Tested using J2SE 6, JDOM 1.1.1, and Firefox 5
running under Windows Vist Home Premium Edition.
*********************************************************/
import java.io.*;
import org.jdom.*;

public class Svg21{
  public static void main(String[] args){

    //DO NOT MODIFY ANY OF THE CODE ABOVE THIS LINE.
    //##################################################//
    //ONLY THE CODE BELOW THIS LINE CAN BE MODIFIED
    
    //CREATE A DRAWING CANVAS
    //This must be the first statement that you write in
    // the program and it must appear only once.
    //The following statement creates a canvas that is
    // 8.5x11 inches in size in a portrait layout. The
    // size of the canvas can be changed by changing the
    // width and height parameters in the method call.
    Element svg = SvgLib21.makeSvg(ns,
                                   "Document Title",
                                   8.5,//width
                                   11  //height
                                   );
                                          

    //DO NOT MODIFY THE FOLLOWING STATEMENT
    //This statement must immediately follow the call to
    // the makeSvg method above and this statement MUST
    // NOT BE MODIFIED.
    Document doc = new Document(svg,docType);
    
    //DESCRIPTION ELEMENT
    //The following code can be used to add a &lt;desc&gt;
    // element to the svg file if you want one. Replace
    // the text in quotation marks with your description.
    // Don't make any other changes to the code.
    SvgLib21.makeDescription(svg,
                             ns,
                             "The basic SVG shapes."
                             );
      
    //XML/SVG COMMENT
    //The following code can be used to insert a comment
    // into the svg file if you want one. Replace the
    // text in quotatin marks with your comment text.
    // Don't make any other changes to the code. You can
    // insert as many statements of this type as you
    // need, one for each comment. A comment will be
    // inserted into the svg file each time you insert a
    // makeComment statement.
    SvgLib21.makeComment(svg,
                         "Show outline of canvas."
                         );

    //Create some geometrical shapes.
    
    //LINE SEGMENT
    //The following code can be used to draw a line
    // segment.
    //Set the values of the first two parameters
    // following ns to specify the x and y coordinates of
    // one end of the line segment.
    //Set the final two parameters to specify the other
    // end of the line segment.
    //By default the line segment (the stroke) is one
    // pixel wide and black.
    //You can insert as many statements of this type as
    // you need, one for each line segment.
    //Give each line segment a unique name such as lineA,
    // lineB, lineC, etc.
    //Don't make any other changes to the code, and in
    // particular, don't delete the commas.
    //The line segment drawn by the following statement
    // extends from the lower-left to the upper-right
    // corner of the canvas.
    Element lineA = SvgLib21.makeLine(svg,
                                      ns,
                                      "line",
                                      0,
                                      0,
                                      8.5,
                                      11.0
                                      );

    //RECTANGLE
    //The following code can be used to draw a
    // rectangle whose sides are parallel to the
    // horizontal and vertical axes.
    //Set the values of the first two parameters
    // following ns to specify the x and y coordinates of
    // the lower-left corner of the rectangle.
    //Set the final two parameters to specify the width
    // and height of the rectangle. 
    //By default the outline of the rectangle (the stroke)
    // is one pixel wide and black.
    //You can insert as many statements of this type as
    // you need, one for each rectangle.
    //Give each rectangle a unique name such as rectA,
    // rectB, rectC, etc.
    //Don't make any other changes to the code.
    //The rectangle drawn by this statement barely fits
    // inside the 8.5x11 inch canvas with a portrait
    // layout.
    Element rectA = SvgLib21.makeRect(svg,
                                      ns,
                                      "rectangle",
                                      0.05,
                                      0.05,
                                      8.4,
                                      10.9
                                      );

    //CIRCLE
    //The following code can be used to draw a circle.
    //Set the first two parameters following ns to
    // specify the x and y coordinates of the center of
    // the circle. 
    //Set the third parameter to specify the radius of
    // the circle.
    //By default the outline of the circle (the stroke)
    // is one pixel wide and black.
    //You can insert as many statements of this type as
    // you need, one for each circle.
    //Give each circle a unique name such as circleA,
    // circleB, circleC, etc.
    //Don't make any other changes to the code.
    // The circle drawn by this statement is centered in
    // the canvas. The radius is slightly less than half
    // the width of the canvas.
    Element circleA = SvgLib21.makeCircle(svg,
                                          ns,
                                          "circle",
                                          4.25,
                                          5.5,
                                          4.15
                                          );

    //ELLIPSE
    //The following code can be used to draw an ellipse
    // whose major and minor axes are parallel to the
    // horizontal and vertical axes.
    //Set the first two parameters following ns to
    // specify the x and y coordinates of the center of
    // the ellipse. 
    //Set the third parameter to specify the horizontal
    // radius of the ellipse.
    //Set the fourth parameter to specify the vertical
    // radius. 
    //By default the outline of the ellipse (the stroke)
    // is one pixel wide and black.
    //You can insert as many statements of this type as
    // you need, one for each ellipse.
    //Give each ellipse a unique name such as ellipseA,
    // ellipseB, ellipseC, etc.
    //Don't make any other changes to the code.
    //The ellipse drawn by this statement is centered in
    // the canvas. It is two inches wide and one inch
    // high.
    Element ellipseA = SvgLib21.makeEllipse(svg,
                                            ns,
                                            "ellipse",
                                            4.25,
                                            5.5,
                                            1.0,
                                            0.5
                                            );
    
    //POLYLINE
    //The following code can be used to draw a polyline,
    // which is a line constructed from a set of line
    // segments that extend from one set of x,y
    // coordinate values to the next set of x,y
    // coordinate values.
    //This is the most versatile of all of the shapes.
    // With enough patience, it can be used to draw any
    // shape that can be drawn with curved lines. To
    // draw a curved line, approximate it using a large
    // number of short line segments.
    //Insert any number of x,y coordinate-pairs inside
    // the curly brackets.
    //By default, the polyline is black with a line width
    // (thickness) of one pixel.
    //You can insert as many statements of this type as
    // you need, one for each polyline.
    //Give each polyline a unique name such as polylineA,
    // polylineB, polylineC, etc.
    //Don't make any other changes to the code.
    //The polyline drawn by the coordinate values used
    // here consists of two line segments that form two
    // sides of a triangle with the third or top side
    // missing.
    Element polylineA = SvgLib21.makePolyline(
                                            svg,
                                            ns,
                                            "polyline",
                                            new double[]{
                                              3.25,4.02,
                                              4.25,3.01,
                                              5.25,4.02
                                            });

    //POLYGON
    //The following code can be used to draw a polygon,
    // which is like a polyline except that an extra line
    // is automatically drawn to connect the last point
    // to the first point. You can use a polygon to draw
    // any closed shape.
    //For example, you could use a polygon to draw a
    // rectangle whose sides are not parallel to the
    // horizontal and vertical axes, or an ellipse whose
    // axes are not parallel to the horizontal and
    // vertical axes.
    //Insert any number of x,y coordinate-pairs inside
    // the curly brackets.
    //By default, the polygon is black with a line
    // thickness of one pixel.
    //You can insert as many statements of this type as
    // you need, one for each polygon.
    //Give each polygon a unique name such as polygonA,
    // polygonB, polygonC, etc.
    //Don't make any other changes to the code.
    //The polygon drawn by the coordinate values used
    // here draws two line segments that form two sides of
    // a triangle with the third or top side being
    // automatically drawn.
    Element polygonA = SvgLib21.makePolygon(svg,
                                            ns,
                                            "polygon",
                                            new double[]{
                                              3.25,8.02,
                                              4.25,7.01,
                                              5.25,8.02
                                            });


    //TEXT
    //The following code can be used to add one line of
    // text to the drawing.
    //Set the values of the first two parameters
    // following ns to specify the x and y coordinates of
    // the bottom left corner of the first letter in the
    // line of text.
    //Set the third parameter following ns to the name of
    // the font family. If no name or an invalid name is
    // entered between the quotation marks, a default
    // font family will be used.
    //Set the fourth parameter following ns to the
    // desired size of the text in points.
    //Set the last parameter to the string of text that
    // is to be drawn.
    //By default the text is normal (not bold, not
    // italic, etc.).
    //You can insert as many statements of this type as
    // you need, one for each line of text.
    //Give each line of text a unique name such as textA,
    // textB, textC, etc.
    //Don't make any other changes to the code.
    //The line of text drawn by the following statement
    // is positioned 2.125 inches from the left edge of
    // the canvas one inch up from the bottom.
    //The bold italic decoration will be applied later.
    Element textA = SvgLib21.makeText(
                        svg,
                        ns,
                        2.125,
                        1.00,
                        "arial",
                        36,
                        "Here is some bold italic text."
                        );
    
    //Decorate the objects in the drawing.
    
    //FONT STYLE
    //The following code can be used to set the font
    // style to normal | italic | oblique where
    // the | character means you must specify one of the
    // choices as a parameter.
    //Set the value of the first parameter to the name of
    // the line of text being modified.
    //Set the value of the second parameter to one of the
    // available choices.
    //Each time you call this method, you must pass a
    // reference to an existing text object as the first
    // parameter.
    //Don't make any other changes to the code.
    //The following statement changes the style of textA
    // from normal to italic.
    SvgLib21.setFontStyle(textA,
                          "italic"
                          );
    
    //FONT WEIGHT
    //The following code can be used to set the font
    // weight to normal | bold | bolder | lighter | 100 |
    // 200 | 300| 400 | 500 | 600 | 700 | 800 | 900
    // where the | character means you must specify one
    // of the choices as a parameter.
    //Set the value of the first parameter to the name of
    // the line of text being modified.
    //Set the value of the second parameter to one of the
    // available choices.
    //Each time you call this method, you must pass a
    // reference to an existing text object as the first
    // parameter.
    //Don't make any other changes to the code.
    //The following statement statement changes the
    // weight of textA from its previous weight to bold.
    SvgLib21.setFontWeight(textA,
                           "bold"
                           );


    //LINE WIDTH
    //The following code can be used to specify the
    // stroke (line) width for rectangles, circles,
    // ellipses, lines, polylines, and polygons.
    //Set the value of the first parameter to the name of
    // the object whose line width is being modified.
    //Set the second parameter to the value of the
    // desired line width in inches.
    //Each time you call the method, you must pass a
    // reference to an existing object as the first
    // parameter
    //Don't make any other changes to the code.
    //Note that when you increase the thickness of a line,
    // the original one-pixel line remains in the center
    // of the new thicker line. In other words, the
    // thickness of the line increases on both sides of
    // the original line.
    
    // The following statement changes the line width of
    // the rectangle to 0.1 inch.
    SvgLib21.setStrokeWidth(rectA,0.1);

    // The following statement changes the line width of
    // the ellipse to 0.25 inch.
    SvgLib21.setStrokeWidth(ellipseA,0.25);

    // The following statement changes the line width of
    // the polyline to 0.15 inch.
    SvgLib21.setStrokeWidth(polylineA,0.15);

    // The following statement changes the line width of
    // the polygon to 0.15 inch.
    SvgLib21.setStrokeWidth(polygonA,0.15);

    // The following statement changes the line width of
    // the line to 0.1 inch.
    SvgLib21.setStrokeWidth(lineA,0.1);

    // The following statement changes the line width of
    // the circle to 0.1 inch.
    SvgLib21.setStrokeWidth(circleA,0.1); 
    
    //With the exception of the code to write the output
    // file, the following code may not be of interest
    // to blind students. However, it may be of interest
    // to students with low vision, so I am including it
    // for completeness.
    
    //STROKE OPACITY
    //The following code can be used to specify the
    // stroke opacity for rectangles, circles, ellipses,
    // lines, polylines, and polygons.
    //Set the value of the first parameter to the name of
    // the object whose stroke opacity is being modified.
    //Set the second parameter to the value of the
    // desired opacity level. A value of 0.0 causes the
    // stroke to be totally transparent. A value of 1.0 
    // causes the stroke to be completely opaque. Values
    // between 0.0 and 1.0 result in a proportional
    // opacity level.
    //Each time you call the method, you must pass a
    // reference to an existing object as the first
    // parameter
    //Don't make any other changes to the code.
    //The following statement changes the line to be 
    //40-percent opaque, or 60-percent transparent,
    // whichever you prefer.
    SvgLib21.setStrokeOpacity(lineA,0.4);   

    //FILL COLOR
    //The following code can be used to specify the fill
    // color for closed shapes such as rectangles,
    // circles, ellipses, and polygons. It can also be
    // applied to polylines, but the results may not be
    // what you expect.
    //Set the value of the first parameter to the name of
    // the object whose fill color is being modified.
    //Set the second parameter to the name of the desired
    // color.  The fill color can be set to "none" or to
    // the name of any of the colors at 
    // http://www.w3.org/TR/SVG/types.html#ColorKeywords,
    // and possibly some other values as well.
    //Each time you call the method, you must pass a
    // reference to an existing object as the first
    // parameter
    //Don't make any other changes to the code.
    //The following statement changes the fill color for
    // the polygon from its previous fill color to dark
    // blue.
    SvgLib21.setFill(polygonA,"blue");

    //FILL OPACITY
    //The following code can be used to specify the fill
    // opacity for rectangles, circles, ellipses,
    // polylines, and polygons. (As with fill color, it
    // might not work as expected with polylines.)
    //Set the value of the first parameter to the name of
    // the object whose fill opacity is being modified.
    //Set the second parameter to the value of the
    // desired opacity level (see the discussion regarding
    // opacity values above).
    // Each time you call the method, you must pass a
    // reference to an existing object as the first
    // parameter
    //Don't make any other changes to the code.
    //The following statement changes the dark blue fill
    // for the polygon to become only 30-percent opaque.
    // Because the background underneath the fill is
    // white, this causes the visible color of the fill
    // to change to a light blue.
    SvgLib21.setFillOpacity(polygonA,0.3);

    //STROKE COLOR
    //The following code can be used to specify the
    // stroke color for rectangles, circles, ellipses,
    // lines, polylines, and polygons.
    //Set the value of the first parameter to the name of
    // the object whose stroke color is being modified.
    //Set the second parameter to the name of the desired
    // color.  (See the discussion of available colors
    // above.)
    //Each time you call the method, you must pass a
    // reference to an existing object as the first
    // parameter.
    //Don't make any other changes to the code.
    //The following statement changes the stroke color
    // for the polygon from its previous color to red.
    SvgLib21.setStroke(polygonA,"red");

    //WRITE OUTPUT FILE
    //The following code can be used to write an output
    // file containing the instructions needed by an svg
    // processor (such as a browser) to display the
    // drawing.
    //This must be the last statement that you write in
    // your program. Otherwise, you will get an
    // incomplete file.
    //Set the value of the first parameter to the desired
    // path and name for the file. Always specify the
    // extension to be svg.
    //Don't make any other changes to the code.
    //The following code writes the output file with the
    // name Svg21.svg in the folder from which the
    // program is being executed (the current folder).
    //Don't include extension in output file name.
    SvgLib21.writePrettyFile("Svg21",doc);
    
    //ONLY THE CODE ABOVE THIS LINE CAN BE MODIFIED
    //##################################################//
    //DO NOT MODIFY ANY OF THE FOLLOWING CODE.    
  }//end main
  //----------------------------------------------------//

  //Create a String variable containing the namespace
  // URI to reduce the amount of typing that is required
  // later. Note that the variable name is short and
  // easy to type.
  static String ns = "http://www.w3.org/2000/svg";
  
  //For clarity, create strings containing the name of
  // the element that is constrained by the DTD (the
  // root element), the Public ID of the DTD, and the
  // System ID of the DTD.
  static String dtdConstrainedElement = "svg";
  static String dtdPublicID = "-//W3C//DTD SVG 1.1//EN";
  static String dtdSystemID = 
     "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd";
   
  static DocType docType = new DocType(
         dtdConstrainedElement,dtdPublicID,dtdSystemID);
}//end class Svg21
</code>




</entry>
</row>
</tbody>


</tgroup>
</table>






</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1295">
This section contains a variety of miscellaneous information.

</para>







<note id="note1001" type="">







<emphasis id="strong1148" effect="bold">
Housekeeping material

</emphasis>



<list id="ul1023" list-type="bulleted">



<item id="li1135">
Module name: If You Can Imagine It, You Can Draw It using SVG

</item>




<item id="li1136">
File: Phy1002.htm


</item>




<item id="li1137">
Revised: 09/29/15

</item>


	

<item id="li1138">
Keywords:

<list id="ul1024" list-type="bulleted">

		

<item id="li1139">
physics

</item>


		

<item id="li1140">
accessible

</item>


		

<item id="li1141">
accessibility

</item>


					

<item id="li1142">
blind

</item>


		

<item id="li1143">
graph board

</item>


		

<item id="li1144">
protractor

</item>


					

<item id="li1145">
screen reader

</item>


		

<item id="li1146">
refreshable Braille display

</item>


		

<item id="li1147">
JavaScript

</item>


		

<item id="li1148">
trigonometry

</item>


		

<item id="li1149">
SVG

</item>


		

<item id="li1150">
scalable vector graphics

</item>


	

</list>




</item>




</list>




</note>









<note id="note1002" type="">




<emphasis id="strong1149" effect="bold">
Disclaimers:

</emphasis>
<para id="p1296">
<emphasis id="strong1150" effect="bold">
Financial

</emphasis>
: Although the 
				

<emphasis id="strong1151" effect="bold">
openstax CNX

</emphasis>

site makes it possible for you to download a PDF file for the collection that 
				contains this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1297">
You also need to know that Prof. Baldwin receives no financial compensation from 
				

<emphasis id="strong1152" effect="bold">
openstax CNX 

</emphasis>
even if you purchase 
	the PDF version of the collection.

</para>


				

<para id="p1298">
In the past, unknown individuals have copied Prof. Baldwin's modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing Prof. Baldwin as the author. 
				Prof. Baldwin 
				neither receives compensation for those sales nor does he know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a collection that is freely 
				available on 

<emphasis id="strong1153" effect="bold">
openstax CNX

</emphasis>
 and that it was made and published without 
				the prior knowledge of Prof. Baldwin.

</para>


				

<para id="p1299">
<emphasis id="strong1154" effect="bold">
Affiliation

</emphasis>
: Prof. Baldwin is a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


	

</note>









<para id="p1300">
-end- 

</para>





</section>
</content>




</document>